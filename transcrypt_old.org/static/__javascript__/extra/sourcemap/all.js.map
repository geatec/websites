{
	"version": 3,
	"file": "D:/activ_tosh/web/sites/transcrypt_new.org/static/__javascript__/all.js",
	"sources": [
		"",
		"c:/python35/lib/site-packages/transcrypt/modules/org/transcrypt/__javascript__/__core__.mod.js",
		"c:/python35/lib/site-packages/transcrypt/modules/org/transcrypt/__base__.py",
		"c:/python35/lib/site-packages/transcrypt/modules/org/transcrypt/__standard__.py",
		"c:/python35/lib/site-packages/transcrypt/modules/org/transcrypt/__javascript__/__builtin__.mod.js",
		"D:/activ_tosh/web/sites/transcrypt_new.org/static/base.py",
		"D:/activ_tosh/web/sites/transcrypt_new.org/static/all.py"
	],
	"sourcesContent": [
		"__pragma__ ('padding')",
		"\tvar __all__ = {};\n\tvar __world__ = __all__;\n\t\n\t// Nested object creator, part of the nesting may already exist and have attributes\n\tvar __nest__ = function (headObject, tailNames, value) {\n\t\t// In some cases this will be a global object, e.g. 'window'\n\t\tvar current = headObject;\n\t\t\n\t\tif (tailNames != '') {\t// Split on empty string doesn't give empty list\n\t\t\t// Find the last already created object in tailNames\n\t\t\tvar tailChain = tailNames.split ('.');\n\t\t\tvar firstNewIndex = tailChain.length;\n\t\t\tfor (var index = 0; index < tailChain.length; index++) {\n\t\t\t\tif (!current.hasOwnProperty (tailChain [index])) {\n\t\t\t\t\tfirstNewIndex = index;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcurrent = current [tailChain [index]];\n\t\t\t}\n\t\t\t\n\t\t\t// Create the rest of the objects, if any\n\t\t\tfor (var index = firstNewIndex; index < tailChain.length; index++) {\n\t\t\t\tcurrent [tailChain [index]] = {};\n\t\t\t\tcurrent = current [tailChain [index]];\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Insert it new attributes, it may have been created earlier and have other attributes\n\t\tfor (var attrib in value) {\n\t\t\tcurrent [attrib] = value [attrib];\t\t\t\n\t\t}\t\t\n\t};\n\t__all__.__nest__ = __nest__;\n\t\n\t// Initialize module if not yet done and return its globals\n\tvar __init__ = function (module) {\n\t\tif (!module.__inited__) {\n\t\t\tmodule.__all__.__init__ (module.__all__);\n\t\t\tmodule.__inited__ = true;\n\t\t}\n\t\treturn module.__all__;\n\t};\n\t__all__.__init__ = __init__;\n\t\n\t// Since we want to assign functions, a = b.f should make b.f produce a bound function\n\t// So __get__ should be called by a property rather then a function\n\t// Factory __get__ creates one of three curried functions for func\n\t// Which one is produced depends on what's to the left of the dot of the corresponding JavaScript property\n\tvar __get__ = function (self, func, quotedFuncName) {\n\t\tif (self) {\n\t\t\tif (self.hasOwnProperty ('__class__') || typeof self == 'string' || self instanceof String) {\t\t\t// Object before the dot\n\t\t\t\tif (quotedFuncName) {\t\t\t\t\t\t\t\t\t// Memoize call since fcall is on, by installing bound function in instance\n\t\t\t\t\tObject.defineProperty (self, quotedFuncName, {\t\t// Will override the non-own property, next time it will be called directly\n\t\t\t\t\t\tvalue: function () {\t\t\t\t\t\t\t// So next time just call curry function that calls function\n\t\t\t\t\t\t\tvar args = [] .slice.apply (arguments);\n\t\t\t\t\t\t\treturn func.apply (null, [self] .concat (args));\n\t\t\t\t\t\t},\t\t\t\t\n\t\t\t\t\t\twritable: true,\n\t\t\t\t\t\tenumerable: true,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn function () {\t\t\t\t\t\t\t\t\t// Return bound function, code dupplication for efficiency if no memoizing\n\t\t\t\t\tvar args = [] .slice.apply (arguments);\t\t\t\t// So multilayer search prototype, apply __get__, call curry func that calls func\n\t\t\t\t\treturn func.apply (null, [self] .concat (args));\n\t\t\t\t};\n\t\t\t}\n\t\t\telse {\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Class before the dot\n\t\t\t\treturn func;\t\t\t\t\t\t\t\t\t\t\t// Return static method\n\t\t\t}\n\t\t}\n\t\telse {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Nothing before the dot\n\t\t\treturn func;\t\t\t\t\t\t\t\t\t\t\t\t// Return free function\n\t\t}\n\t}\n\t__all__.__get__ = __get__;\n\t\t\t\n\t// Class creator function\n\tvar __class__ = function (name, bases, extra) {\n\t\t// Create class functor\n\t\tvar cls = function () {\n\t\t\tvar args = [] .slice.apply (arguments);\n\t\t\treturn cls.__new__ (args);\n\t\t};\n\t\t\n\t\t// Copy methods, properties and static attributes from base classes to new class object\n\t\tfor (var index = bases.length - 1; index >= 0; index--) {\t// Reversed order, since class vars of first base should win\n\t\t\tvar base = bases [index];\n\t\t\tfor (var attrib in base) {\n\t\t\t\tvar descrip = Object.getOwnPropertyDescriptor (base, attrib);\n\t\t\t\tObject.defineProperty (cls, attrib, descrip);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Add class specific attributes to class object\n\t\tcls.__name__ = name;\n\t\tcls.__bases__ = bases;\n\t\t\n\t\t// Add own methods, properties and static attributes to class object\n\t\tfor (var attrib in extra) {\n\t\t\tvar descrip = Object.getOwnPropertyDescriptor (extra, attrib);\n\t\t\tObject.defineProperty (cls, attrib, descrip);\n\t\t}\n\t\t\t\t\n\t\t// Return class object\n\t\treturn cls;\n\t};\n\t__all__.__class__ = __class__;\n\t\n\t// Create mother of all classes\t\t\n\tvar object = __all__.__class__ ('object', [], {\n\t\t__init__: function (self) {},\n\t\t\t\n\t\t__name__: 'object',\n\t\t__bases__: [],\n\t\t\t\n\t\t// Object creator function is inherited by all classes (so in principle it could be made global)\n\t\t__new__: function (args) {\t// Args are just the constructor args\t\t\n\t\t\t// In JavaScript the Python class is the prototype of the Python object\n\t\t\t// In this way methods and static attributes will be available both with a class and an object before the dot\n\t\t\t// The descriptor produced by __get__ will return the right method flavor\n\t\t\tvar instance = Object.create (this, {__class__: {value: this, enumerable: true}});\n\t\t\t\n\t\t\t// Call constructor\n\t\t\tthis.__init__.apply (null, [instance] .concat (args));\n\t\t\t\n\t\t\t// Return instance\t\t\t\n\t\t\treturn instance;\n\t\t}\t\n\t});\n\t__all__.object = object;\n\t\n\t// Define __pragma__ to preserve '<all>' and '</all>', since it's never generated as a function, must be done early, so here\n\tvar __pragma__ = function () {};\n\t__all__.__pragma__ = __pragma__;\n",
		"# This module is avaible both in the Python and Transcrypt environments\n# It is included in-between the __core__ and the __builtin__ module, so the latter can adapt __envir__\n# In Transcrypt, __base__ is available inline, it isn't nested and cannot be imported in the normal way\n\nclass __Envir__:\n\tdef __init__ (self):\n\t\tself.transpiler_name = 'transcrypt'\n\t\tself.transpiler_version = '3.5.226'\n\t\tself.target_subdir = '__javascript__'\n\t\t\n__envir__ = __Envir__ ()",
		"# This module is avaible solely in the Transcrypt environment\n# It is included after the __builtin__ module, since it uses its facilities\n# In Transcrypt, __standard__ is available inline, it isn't nested and cannot be imported in the normal way\n\n__pragma__ ('skip')\ncopy = Math = __typeof__ = __repr__ = document = console = window = 0\n__pragma__ ('noskip')\n\n__pragma__ ('nokwargs')\n__pragma__ ('noalias', 'sort')\n\nclass Exception:\n\t__pragma__ ('kwargs')\n\tdef __init__ (self, *args, **kwargs):\n\t\tself.__args__ = args\n\t\ttry:\n\t\t\tself.stack = kwargs.error.stack\t# Integrate with JavaScript Error object\n\t\texcept:\n\t\t\tself.stack = 'No stack trace available'\n\t__pragma__ ('nokwargs')\n\t\t\n\tdef __repr__ (self):\n\t\tif len (self.__args__):\n\t\t\treturn '{}{}'.format (self.__class__.__name__, repr (tuple (self.__args__)))\n\t\telse:\n\t\t\treturn '{}()'.format (self.__class__.__name__)\n\t\t\t\n\tdef __str__ (self):\n\t\tif len (self.__args__) > 1:\n\t\t\treturn str (tuple (self.__args__))\n\t\telif len (self.__args__):\n\t\t\treturn str (self.__args__ [0])\n\t\telse:\n\t\t\treturn ''\n\t\t\nclass IterableError (Exception):\n\tdef __init__ (self, error):\n\t\tException.__init__ (self, 'Can\\'t iterate over non-iterable', error = error)\n\t\t\t\nclass StopIteration (Exception):\n\tdef __init__ (self, error):\n\t\tException.__init__ (self, 'Iterator exhausted', error = error)\n\t\t\nclass ValueError (Exception,):\n\tdef __init__ (self, error):\n\t\tException.__init__ (self, 'Erroneous value', error = error)\n\t\nclass KeyError (Exception,):\n\tdef __init__ (self, error):\n\t\tException.__init__ (self, 'Invalid key', error = error)\n\t\nclass AssertionError (Exception):\n\tdef __init__ (self, message, error):\n\t\tif message:\n\t\t\tException.__init__ (self, message, error = error)\n\t\telse:\n\t\t\tException.__init__ (self, error = error)\n\t\n__pragma__ ('kwargs')\n\t\t\t\ndef __sort__ (iterable, key = None, reverse = False):\t# Used by py_sort, can deal with kwargs\n\tif key:\n\t\titerable.sort (lambda a, b: key (a) > key (b))\t# JavaScript sort\n\telse:\n\t\titerable.sort ()\t\t\t\t\t\t\t\t# JavaScript sort\n\t\t\n\tif reverse:\n\t\titerable.reverse ()\n\t\t\ndef sorted (iterable, key = None, reverse = False):\n\tif type (iterable) == dict:\n\t\tresult = copy (iterable.keys ()) \n\telse:\t\t\n\t\tresult = copy (iterable)\n\t\t\n\t__sort__ (result, key, reverse)\n\treturn result\n\n\n__pragma__ ('nokwargs')\n\ndef map (func, iterable):\n\treturn [func (item) for item in iterable]\n\n\ndef filter (func, iterable):\n\treturn [item for item in iterable if func (item)]\n\t\n__pragma__ ('ifdef', '__complex__')\nclass complex:\n\tdef __init__ (self, real, imag = None):\n\t\tif imag == None:\n\t\t\tif type (real) == complex:\n\t\t\t\tself.real = real.real\n\t\t\t\tself.imag = real.imag\n\t\t\telse:\n\t\t\t\tself.real = real\n\t\t\t\tself.imag = 0\n\t\telse:\n\t\t\tself.real = real\n\t\t\tself.imag = imag\n\t\t\t\n\tdef __neg__ (self):\n\t\treturn complex (-self.real, -self.imag)\n\t\t\n\tdef __exp__ (self):\n\t\tmodulus = Math.exp (self.real)\n\t\treturn complex (modulus * Math.cos (self.imag), modulus * Math.sin (self.imag))\n\t\n\tdef __log__ (self):\n\t\treturn complex (Math.log (Math.sqrt (self.real * self.real + self.imag * self.imag)), Math.atan2 (self.imag, self.real))\n\t\t\n\tdef __pow__ (self, other):\t# a ** b = exp (b log a)\n\t\treturn (self.__log__ () .__mul__ (other)) .__exp__ ()\n\t\t\n\tdef __rpow__ (self, real):\t# real ** comp -> comp.__rpow__ (real)\n\t\treturn self.__mul__ (Math.log (real)) .__exp__ ()\n\t\t\n\tdef __mul__ (self, other):\n\t\tif __typeof__ (other) is 'number':\n\t\t\treturn complex (self.real * other, self.imag * other)\n\t\telse:\n\t\t\treturn complex (self.real * other.real - self.imag * other.imag, self.real * other.imag + self.imag * other.real)\n\t\t\n\tdef __rmul__ (self, real):\t# real + comp -> comp.__rmul__ (real)\n\t\treturn complex (self.real * real, self.imag * real)\n\t\t\n\tdef __div__ (self, other):\n\t\tif __typeof__ (other) is 'number':\n\t\t\treturn complex (self.real / other, self.imag / other)\n\t\telse:\n\t\t\tdenom = other.real * other.real + other.imag * other.imag\n\t\t\treturn complex (\n\t\t\t\t(self.real * other.real + self.imag * other.imag) / denom,\n\t\t\t\t(self.imag * other.real - self.real * other.imag) / denom\n\t\t\t)\n\t\t\n\tdef __rdiv__ (self, real):\t# real / comp -> comp.__rdiv__ (real)\n\t\tdenom = self.real * self.real\n\t\treturn complex (\n\t\t\t(real * self.real) / denom,\n\t\t\t(real * self.imag) / denom\n\t\t)\n\t\t\n\tdef __add__ (self, other):\n\t\tif __typeof__ (other) is 'number':\n\t\t\treturn complex (self.real + other, self.imag)\n\t\telse:\t# Assume other is complex\n\t\t\treturn complex (self.real + other.real, self.imag + other.imag)\n\t\t\n\tdef __radd__ (self, real):\t# real + comp -> comp.__radd__ (real)\n\t\treturn complex (self.real + real, self.imag)\n\t\t\n\tdef __sub__ (self, other):\n\t\tif __typeof__ (other) is 'number':\n\t\t\treturn complex (self.real - other, self.imag)\n\t\telse:\n\t\t\treturn complex (self.real - other.real, self.imag - other.imag)\n\t\t\n\tdef __rsub__ (self, real):\t# real - comp -> comp.__rsub__ (real)\n\t\treturn complex (real - self.real, -self.imag)\n\t\t\n\tdef __repr__ (self):\n\t\treturn '({}{}{}j)'.format (self.real, '+' if self.imag >= 0 else '', self.imag)\n\t\t\t\n\tdef __str__ (self):\n\t\treturn __repr__ (self) [1 : -1]\n\t\t\n__pragma__ ('endif')\n\nclass __Terminal__:\n\tdef __init__ (self):\n\t\ttry:\n\t\t\tself.element = document.getElementById ('__terminal__')\n\t\texcept:\t# node.js\n\t\t\tself.element = None\n\t\tif self.element:\n\t\t\tself.buffer = ''\n\t\t\tself.element.style.overflowX = 'auto'\n\t\t\tself.element.style.padding = '5px'\n\t\t\tself.element.innerHTML = '_'\n\t\t\n\t__pragma__ ('kwargs')\n\t\t\n\tdef print (self, *args, sep = ' ', end = '\\n'):\n\t\tif self.element:\n\t\t\tself.buffer = '{}{}{}'.format (self.buffer, sep.join ([str (arg) for arg in args]), end) [-4096 : ]\t\n\t\t\tself.element.innerHTML = self.buffer.replace ('\\n', '<br>')\n\t\t\tself.element.scrollTop = self.element.scrollHeight\n\t\telse:\n\t\t\tconsole.log (sep.join ([str (arg) for arg in args]))\n\t\t\n\tdef input (self, question):\n\t\tself.print ('{}_'.format (question), end = '')\n\t\ttry:\n\t\t\tanswer = window.prompt (question)\n\t\texcept:\n\t\t\tconsole.log ('Error: Blocking input not yet implemented outside browser')\n\t\tself.buffer = self.buffer [:-1]\n\t\tself.print (answer)\n\t\treturn answer\n\t\t\n\t__pragma__ ('nokwargs')\n\t\n__terminal__ = __Terminal__ ()\n",
		"\n\t// Initialize non-nested modules __base__ and __standard__ and make its names available directly and via __all__\n\t// It can't do that itself, because it is a regular Python module\n\t// The compiler recognizes its their namesand generates them inline rather than nesting them\n\t// In this way it isn't needed to import them everywhere\n\t \t\n\t// __base__\n\t\n\t__nest__ (__all__, '', __init__ (__all__.org.transcrypt.__base__));\n\tvar __envir__ = __all__.__envir__;\n\n\t// __standard__\n\t\n\t__nest__ (__all__, '', __init__ (__all__.org.transcrypt.__standard__));\n\t\n\tvar Exception = __all__.Exception;\n\tvar IterableError = __all__.IterableError;\n\tvar StopIteration = __all__.StopIteration;\n\tvar ValueError = __all__.ValueError;\n\tvar AssertionError = __all__.AssertionError;\n\t\n\tvar __sort__ = __all__.__sort__;\n\tvar sorted = __all__.sorted;\n\t\n\tvar map = __all__.map;\n\tvar filter = __all__.filter;\n\t\n__pragma__ ('ifdef', '__complex__')\n\tvar complex = __all__.complex;\n__pragma__ ('endif')\n\t\n\t__all__.print = __all__.__terminal__.print;\n\t__all__.input = __all__.__terminal__.input;\n\t\n\tvar print = __all__.print;\n\tvar input = __all__.input;\n\n\t// Complete __envir__, that was created in __base__, for non-stub mode\n\t__envir__.executor_name = __envir__.transpiler_name;\n\t\n\t// Make make __main__ available in browser\n\tvar __main__ = {__file__: ''};\n\t__all__.main = __main__;\n\t\n\t// Define current exception, there's at most one exception in the air at any time\n\tvar __except__ = null;\n\t__all__.__except__ = __except__;\n\t\t\n\t// Define recognizable dictionary for **kwargs parameter\n\tvar __kwargdict__ = function (anObject) {\n\t\tanObject.__class__ = __kwargdict__;\t// This class needs no __name__\n\t\tanObject.constructor = Object;\n\t\treturn anObject;\n\t}\n\t__all__.___kwargdict__ = __kwargdict__;\n\t\n\t// Property installer function, no member since that would bloat classes\n\tvar property = function (getter, setter) {\t// Returns a property descriptor rather than a property\n\t\tif (!setter) {\t// ??? Make setter optional instead of dummy?\n\t\t\tsetter = function () {};\n\t\t}\n\t\treturn {get: function () {return getter (this)}, set: function (value) {setter (this, value)}, enumerable: true};\n\t}\n\t__all__.property = property;\n\t\n\t// Assert function, call to it only generated when compiling with --dassert option\n\tfunction assert (condition, message) {\t// Message may be undefined\n\t\tif (!condition) {\n\t\t\tthrow AssertionError (message, new Error ());\n\t\t}\n\t}\n\t\n\t__all__.assert = assert;\n\t\n\tvar __merge__ = function (object0, object1) {\n\t\tvar result = {};\n\t\tfor (var attrib in object0) {\n\t\t\tresult [attrib] = object0 [attrib];\n\t\t}\n\t\tfor (var attrib in object1) {\n\t\t\tresult [attrib] = object1 [attrib];\n\t\t}\n\t\treturn result;\n\t}\n\t__all__.__merge__ = __merge__;\n\t\n\t/* Not needed anymore?\n\t// Make console.log understand apply\n\tconsole.log.apply = function () {\n\t\tprint ([] .slice.apply (arguments) .slice (1));\n\t};\n\t*/\n\n\t// Manipulating attributes by name\n\t\n\tvar dir = function (obj) {\n\t\tvar aList = [];\n\t\tfor (var aKey in obj) {\n\t\t\taList.push (aKey);\n\t\t}\n\t\taList.sort ();\n\t\treturn aList;\n\t}\n\t\n\tvar setattr = function (obj, name, value) {\n\t\tobj [name] = value;\n\t};\n\t\t\n\t__all__.setattr = setattr;\n\t\n\tvar getattr = function (obj, name) {\n\t\treturn obj [name];\n\t};\n\t\n\t__all__.getattr= getattr\n\t\n\tvar hasattr = function (obj, name) {\n\t\treturn name in obj;\n\t};\n\t__all__.hasattr = hasattr;\n\t\n\tvar delattr = function (obj, name) {\n\t\tdelete obj [name];\n\t};\n\t__all__.delattr = (delattr);\n\t\n\t// The __in__ function, used to mimic Python's 'in' operator\n\t// In addition to CPython's semantics, the 'in' operator is also allowed to work on objects, avoiding a counterintuitive separation between Python dicts and JavaScript objects\n\t// In general many Transcrypt compound types feature a deliberate blend of Python and JavaScript facilities, facilitating efficient integration with JavaScript libraries\n\t// If only Python objects and Python dicts are dealt with in a certain context, the more pythonic 'hasattr' is preferred for the objects as opposed to 'in' for the dicts\n\tvar __in__ = function (element, container) {\n\t\tif (type (container) == dict) {\n\t\t\treturn container.keys () .indexOf (element) > -1;                                   // The keys of parameter 'element' are in an array\n\t\t}\n\t\telse {\n\t\t\treturn container.indexOf ? container.indexOf (element) > -1 : element in container; // Parameter 'element' itself is an array, string or object\n\t\t}\n\t}\n\t__all__.__in__ = __in__;\n\t\n\t// Find out if an attribute is special\n\tvar __specialattrib__ = function (attrib) {\n\t\treturn (attrib.startswith ('__') && attrib.endswith ('__')) || attrib == 'constructor' || attrib.startswith ('py_');\n\t}\n\t__all__.__specialattrib__ = __specialattrib__;\n\t\t\n\t// Len function for any object\n\tvar len = function (anObject) {\n\t\tif (anObject) {\n\t\t\tvar l = anObject.length;\n\t\t\tif (l == undefined) {\n\t\t\t\tvar result = 0;\n\t\t\t\tfor (var attrib in anObject) {\n\t\t\t\t\tif (!__specialattrib__ (attrib)) {\n\t\t\t\t\t\tresult++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn l;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn 0;\n\t\t}\n\t}\n\t__all__.len = len;\n\t\n\n\t// General conversions\n\t\n\tfunction __ (any) {\t\t\t\t// Truthyness, __ ([1, 2, 3]) returns [1, 2, 3], needed for nonempty selection: l = list1 or list2]\n\t\treturn (['boolean', 'number'] .indexOf (typeof any) >= 0 || any instanceof Function || len (any)) ? any : false;\n\t\t// JavaScript functions have a length attribute, denoting the number of parameters\n\t\t// Python objects are JavaScript functions, but their length doesn't matter, only their existence\n\t\t// By the term 'any instanceof Function' we make sure that Python objects aren't rejected when their length equals zero\n\t}\n\t__all__.__ = __;\n\t\n\tvar bool = function (any) {\t\t// Always truly returns a bool, rather than something truthy or falsy\n\t\treturn !!__ (any);\n\t}\n\tbool.__name__ = 'bool'\t\t\t// So it can be used as a type with a name\n\t__all__.bool = bool;\n\t\n\tvar float = function (any) {\n\t\tif (isNaN (any)) {\n\t\t\tthrow ValueError (new Error ());\n\t\t}\n\t\telse {\n\t\t\treturn +any;\n\t\t}\n\t}\n\tfloat.__name__ = 'float'\n\t__all__.float = float;\n\t\n\tvar int = function (any) {\n\t\treturn float (any) | 0\n\t}\n\tint.__name__ = 'int';\n\t__all__.int = int;\n\t\n\tvar type = function (anObject) {\n\t\ttry {\n\t\t\tvar result = anObject.__class__;\n\t\t\treturn result;\n\t\t}\n\t\tcatch (exception) {\n\t\t\tvar aType = typeof anObject;\n\t\t\tif (aType == 'boolean') {\n\t\t\t\treturn bool;\n\t\t\t}\n\t\t\telse if (aType == 'number') {\n\t\t\t\tif (anObject % 1 == 0) {\n\t\t\t\t\treturn int;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn float;\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn aType;\n\t\t\t}\n\t\t}\n\t}\n\t__all__.type = type;\n\t\n\tvar isinstance = function (anObject, classinfo) {\n\t\tfunction isA (queryClass) {\n\t\t\tif (queryClass == classinfo) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tfor (var index = 0; index < queryClass.__bases__.length; index++) {\n\t\t\t\tif (isA (queryClass.__bases__ [index], classinfo)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\treturn '__class__' in anObject ? isA (anObject.__class__) : anObject instanceof classinfo;\n\t\t}\n\t\tcatch (exception) {\n\t\t\tconsole.log (exception);\n\t\t\tconsole.dir (anObject);\n\t\t}\n\t};\n\t__all__.isinstance = isinstance;\n\t\n\t// Repr function uses __repr__ method, then __str__ then toString\n\tvar repr = function (anObject) {\n\t\ttry {\n\t\t\treturn anObject.__repr__ ();\n\t\t}\n\t\tcatch (exception) {\n\t\t\ttry {\n\t\t\t\treturn anObject.__str__ ();\n\t\t\t}\n\t\t\tcatch (exception) {\t// It was a dict in Python, so an Object in JavaScript\n\t\t\t\ttry {\n\t\t\t\t\tif (anObject.constructor == Object) {\n\t\t\t\t\t\tvar result = '{';\n\t\t\t\t\t\tvar comma = false;\n\t\t\t\t\t\tfor (var attrib in anObject) {\n\t\t\t\t\t\t\tif (!__specialattrib__ (attrib)) {\n\t\t\t\t\t\t\t\tif (attrib.isnumeric ()) {\n\t\t\t\t\t\t\t\t\tvar attribRepr = attrib;\t\t\t\t// If key can be interpreted as numerical, we make it numerical \n\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t// So we accept that '1' is misrepresented as 1\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tvar attribRepr = '\\'' + attrib + '\\'';\t// Alpha key in dict\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (comma) {\n\t\t\t\t\t\t\t\t\tresult += ', ';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tcomma = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tresult += attribRepr + ': ' + anObject [attrib] .__repr__ ();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcatch (exception) {\n\t\t\t\t\t\t\t\t\tresult += attribRepr + ': ' + anObject [attrib] .toString ();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresult += '}';\n\t\t\t\t\t\treturn result;\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn typeof anObject == 'boolean' ? anObject.toString () .capitalize () : anObject.toString ();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (exception) {\n\t\t\t\t\tconsole.log ('ERROR: Could not evaluate repr (<object of type ' + typeof anObject + '>)');\n\t\t\t\t\treturn '???';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t__all__.repr = repr;\n\t\n\t// Char from Unicode or ASCII\n\tvar chr = function (charCode) {\n\t\treturn String.fromCharCode (charCode);\n\t}\n\t__all__.chr = chr;\n\n\t// Unicode or ASCII from char\n\tvar ord = function (aChar) {\n\t\treturn aChar.charCodeAt (0);\n\t}\n\t__all__.org = ord;\n\t\n\t// Maximum of n numbers\n\tvar max = Math.max;\n\t__all__.max = max;\n\t\n\t// Minimum of n numbers\n\tvar min = Math.min;\n\t__all__.min = min;\n\t\n\t// Absolute value\n__pragma__ ('ifdef', '__complex__')\n\tvar abs = function (x) {\n\t\ttry {\n\t\t\treturn Math.abs (x);\n\t\t}\n\t\tcatch (exception) {\n\t\t\treturn Math.sqrt (x.real * x.real + x.imag * x.imag);\n\t\t}\n\t}\n__pragma__ ('else')\n\tvar abs = Math.abs;\n\t__all__.abs = abs;\n__pragma__ ('endif')\n\t\n\t// Bankers rounding\n\tvar round = function (number, ndigits) {\n\t\tif (ndigits) {\n\t\t\tvar scale = Math.pow (10, ndigits);\n\t\t\tnumber *= scale;\n\t\t}\n\t\t\t\n\t\tvar rounded = Math.round (number);\n\t\tif (rounded - number == 0.5 && rounded % 2) {\t// Has rounded up to odd, should have rounded down to even\n\t\t\trounded -= 1;\n\t\t}\n\t\t\t\n\t\tif (ndigits) {\n\t\t\trounded /= scale;\n\t\t}\n\t\t\n\t\treturn rounded\n \t}\n\t__all__.round = round;\n\t\t\n\t// Iterator protocol functions\n\t\n\tfunction wrap_py_next () {\t\t// Add as 'next' method to make Python iterator JavaScript compatible\n\t\tvar result = this.__next__ ();\n\t\treturn {value: result, done: result == undefined};\t\t\n\t}\n\t\n\tfunction wrap_js_next () {\t\t// Add as '__next__' method to make JavaScript iterator Python compatible\n\t\tvar result = this.next ();\n\t\tif (result.done) {\n\t\t\tthrow StopIteration (new Error ());\n\t\t}\n\t\telse {\n\t\t\treturn result.value;\n\t\t}\n\t}\n\t\n\tfunction py_iter (iterable) {\t\t\t\t\t// Produces universal iterator with Python '__next__' as well as JavaScript 'next'\n\t\ttry {\n\t\t\tif ('__iter__' in iterable) {\t\t\t\t// It's a Python iterable (incl. JavaScript Arrays and strings)\n\t\t\t\tvar iterator = iterable.__iter__ ();\n\t\t\t\titerator.next = wrap_py_next;\n\t\t\t\treturn iterator;\n\t\t\t}\n\t\t\telse if ('selector' in iterable) { \t\t\t// Assume it's a JQuery iterator\n\t\t\t\tvar iterator = list (iterable) .__iter__ ();\n\t\t\t\titerator.next = wrap_py_next;\n\t\t\t\treturn iterator;\n\t\t\t}\n\t\t\telse if ('next' in iterable) {\t\t\t\t// It's a JavaScript generator\n\t\t\t\t// It should have an iterator field, but doesn't in Chrome\n\t\t\t\t// So we just return the generator itself, which is both an iterable and an iterator\n\t\t\t\titerable.__next__ = wrap_js_next;\n\t\t\t\treturn iterable;\n\t\t\t}\n\t\t\telse if (Symbol.iterator in iterable) {\t\t// It's a JavaScript iterable such as a typed array, but not a generator\n\t\t\t\titerator = iterable [Symbol.iterator] ();\n\t\t\t\titerator.__next__ = wrap_js_next;\n\t\t\t\treturn iterator;\n\t\t\t}\n\t\t}\n\t\tcatch (exception) {\n\t\t}\n\t\tthrow IterableError (new Error ());\t// No iterator at all, 'in' may be false everywhere, or throw an exception\n\t}\n\t__all__.py_iter = py_iter;\n\t\n\tfunction py_next (iterator) {\t\t\t\t// Called only in a Python context, could receive Python or JavaScript iterator\n\t\ttry {\t\t\t\t\t\t\t\t\t// Primarily assume Python iterator, for max speed\n\t\t\tvar result = iterator.__next__ ();\n\t\t}\n\t\tcatch (exception) {\t\t\t\t\t\t// JavaScript iterators are the exception here\n\t\t\tvar result = iterator.next ();\n\t\t\tif (result.done) {\n\t\t\t\tthrow StopIteration (new Error ());\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn result.value;\n\t\t\t}\n\t\t}\t\n\t\tif (result == undefined) {\n\t\t\tthrow StopIteration (new Error ());\n\t\t}\n\t\treturn result;\n\t}\n\t__all__.py_next = py_next;\n\t\n\tfunction __SeqIterator__ (iterable) {\n\t\tthis.iterable = iterable;\n\t\tthis.index = 0;\n\t}\n\t\n\t__all__.__SeqIterator__ = __SeqIterator__;\n\t\n\t__SeqIterator__.prototype.__iter__ = function () {\n\t\treturn this;\n\t}\n\t\n\t__SeqIterator__.prototype.__next__ = function () {\n\t\treturn this.iterable [this.index++];\n\t}\n\t\n\t__SeqIterator__.prototype.next = wrap_py_next;\n\t\n\tfunction __KeyIterator__ (iterable) {\n\t\tthis.iterable = iterable;\n\t\tthis.index = 0;\n\t}\n\n\t__all__.__KeyIterator__ = __KeyIterator__;\n\t\n\t__KeyIterator__.prototype.__iter__ = function () {\n\t\treturn this;\n\t}\n\t\n\t__KeyIterator__.prototype.__next__ = function () {\n\t\treturn this.iterable.keys () [this.index++];\n\t}\n\t\t\t\n\t__KeyIterator__.prototype.next = wrap_py_next;\n\t\n\t// Reversed function for arrays\n\tvar py_reversed = function (iterable) {\n\t\titerable = iterable.slice ();\n\t\titerable.reverse ();\n\t\treturn iterable;\n\t}\n\t__all__.py_reversed = py_reversed;\n\t\n\t// Zip method for arrays\n\tvar zip = function () {\n\t\tvar args = [] .slice.call (arguments);\n\t\tvar shortest = args.length == 0 ? [] : args.reduce (\t// Find shortest array in arguments\n\t\t\tfunction (array0, array1) {\n\t\t\t\treturn array0.length < array1.length ? array0 : array1;\n\t\t\t}\n\t\t);\n\t\treturn shortest.map (\t\t\t\t\t// Map each element of shortest array\n\t\t\tfunction (current, index) {\t\t\t// To the result of this function\n\t\t\t\treturn args.map (\t\t\t\t// Map each array in arguments\n\t\t\t\t\tfunction (current) {\t\t// To the result of this function\n\t\t\t\t\t\treturn current [index]; // Namely it's index't entry\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n\t__all__.zip = zip;\n\t\n\t// Range method, returning an array\n\tfunction range (start, stop, step) {\n\t\tif (stop == undefined) {\n\t\t\t// one param defined\n\t\t\tstop = start;\n\t\t\tstart = 0;\n\t\t}\n\t\tif (step == undefined) {\n\t\t\tstep = 1;\n\t\t}\n\t\tif ((step > 0 && start >= stop) || (step < 0 && start <= stop)) {\n\t\t\treturn [];\n\t\t}\n\t\tvar result = [];\n\t\tfor (var i = start; step > 0 ? i < stop : i > stop; i += step) {\n\t\t\tresult.push(i);\n\t\t}\n\t\treturn result;\n\t};\n\t__all__.range = range;\n\t\n\t// Any, all and sum\n\t\n__pragma__ ('ifdef', '__esv6__')\n\tfunction any (iterable) {\n\t\tfor (let item of iterable) {\n\t\t\tif (bool (item)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tfunction all (iterable) {\n\t\tfor (let item of iterable) {\n\t\t\tif (! bool (item)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tfunction sum (iterable) {\n\t\tlet result = 0;\n\t\tfor (let item of iterable) {\n\t\t\tresult += item;\n\t\t}\n\t\treturn result;\n\t}\n__pragma__ ('else')\n\tfunction any (iterable) {\n\t\tfor (var index = 0; index < iterable.length; index++) {\n\t\t\tif (bool (iterable [index])) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tfunction all (iterable) {\n\t\tfor (var index = 0; index < iterable.length; index++) {\n\t\t\tif (! bool (iterable [index])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tfunction sum (iterable) {\n\t\tvar result = 0;\n\t\tfor (var index = 0; index < iterable.length; index++) {\n\t\t\tresult += iterable [index];\n\t\t}\n\t\treturn result;\n\t}\n__pragma__ ('endif')\n\n\t__all__.any = any;\n\t__all__.all = all;\n\t__all__.sum = sum;\n\t\n\t// Enumerate method, returning a zipped list\n\tfunction enumerate (iterable) {\n\t\treturn zip (range (len (iterable)), iterable);\n\t}\n\t__all__.enumerate = enumerate;\n\t\t\n\t// Shallow and deepcopy\n\t\n\tfunction copy (anObject) {\n\t\tif (anObject == null || typeof anObject == \"object\") {\n\t\t\treturn anObject;\n\t\t}\n\t\telse {\n\t\t\tvar result = {}\n\t\t\tfor (var attrib in obj) {\n\t\t\t\tif (anObject.hasOwnProperty (attrib)) {\n\t\t\t\t\tresult [attrib] = anObject [attrib];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\t__all__.copy = copy;\n\t\n\tfunction deepcopy (anObject) {\n\t\tif (anObject == null || typeof anObject == \"object\") {\n\t\t\treturn anObject;\n\t\t}\n\t\telse {\n\t\t\tvar result = {}\n\t\t\tfor (var attrib in obj) {\n\t\t\t\tif (anObject.hasOwnProperty (attrib)) {\n\t\t\t\t\tresult [attrib] = deepcopy (anObject [attrib]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\t__all__.deepcopy = deepcopy;\n\t\t\n\t// List extensions to Array\n\t\n\tfunction list (iterable) {\t\t\t\t\t\t\t\t\t\t// All such creators should be callable without new\n__pragma__ ('ifdef', '__esv6__')\n\t\tvar instance = iterable ? Array.from (iterable) : [];\n__pragma__ ('else')\n\t\tvar instance = iterable ? [] .slice.apply (iterable) : [];\t// Spread iterable, n.b. array.slice (), so array before dot\n__pragma__ ('endif')\n\t\t// Sort is the normal JavaScript sort, Python sort is a non-member function\n\t\treturn instance;\n\t}\n\t__all__.list = list;\n\tArray.prototype.__class__ = list;\t// All arrays are lists (not only if constructed by the list ctor), unless constructed otherwise\n\tlist.__name__ = 'list';\n\t\n\t/*\n\tArray.from = function (iterator) { // !!! remove\n\t\tresult = [];\n\t\tfor (item of iterator) {\n\t\t\tresult.push (item);\n\t\t}\n\t\treturn result;\n\t}\n\t*/\n\t\n\tArray.prototype.__iter__ = function () {\n\t\treturn new __SeqIterator__ (this);\n\t}\n\t\n\tArray.prototype.__getslice__ = function (start, stop, step) {\n\t\tif (start < 0) {\n\t\t\tstart = this.length + start;\n\t\t}\n\t\t\n\t\tif (stop == null) {\n\t\t\tstop = this.length;\n\t\t}\n\t\telse if (stop < 0) {\n\t\t\tstop = this.length + stop;\n\t\t}\n\t\t\n\t\tvar result = list ([]);\n\t\tfor (var index = start; index < stop; index += step) {\n\t\t\tresult.push (this [index]);\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\t\t\n\tArray.prototype.__setslice__ = function (start, stop, step, source) {\n\t\tif (start < 0) {\n\t\t\tstart = this.length + start;\n\t\t}\n\t\t\t\n\t\tif (stop == null) {\n\t\t\tstop = this.length;\n\t\t}\n\t\telse if (stop < 0) {\n\t\t\tstop = this.length + stop;\n\t\t}\n\t\t\t\n\t\tif (step == null) {\t// Assign to 'ordinary' slice, replace subsequence\n\t\t\tArray.prototype.splice.apply (this, [start, stop - start] .concat (source)) \n\t\t}\n\t\telse {\t\t\t\t// Assign to extended slice, replace designated items one by one\n\t\t\tvar sourceIndex = 0;\n\t\t\tfor (var targetIndex = start; targetIndex < stop; targetIndex += step) {\n\t\t\t\tthis [targetIndex] = source [sourceIndex++];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tArray.prototype.__repr__ = function () {\n\t\tif (this.__class__ == set && !this.length) {\n\t\t\treturn 'set()';\n\t\t}\n\t\t\n\t\tvar result = !this.__class__ || this.__class__ == list ? '[' : this.__class__ == tuple ? '(' : '{';\n\t\t\n\t\tfor (var index = 0; index < this.length; index++) {\n\t\t\tif (index) {\n\t\t\t\tresult += ', ';\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tresult += this [index] .__repr__ ();\n\t\t\t}\n\t\t\tcatch (exception) {\n\t\t\t\tresult += this [index] .toString ();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.__class__ == tuple && this.length == 1) {\n\t\t\tresult += ',';\n\t\t}\n\t\t\n\t\tresult += !this.__class__ || this.__class__ == list ? ']' : this.__class__ == tuple ? ')' : '}';;\n\t\treturn result;\n\t};\n\t\n\tArray.prototype.__str__ = Array.prototype.__repr__;\n\t\n\tArray.prototype.append = function (element) {\n\t\tthis.push (element);\n\t};\n\n\tArray.prototype.clear = function () {\n\t\tthis.length = 0;\n\t};\n\t\n\tArray.prototype.extend = function (aList) {\n\t\tthis.push.apply (this, aList);\n\t};\n\t\n\tArray.prototype.insert = function (index, element) {\n\t\tthis.splice (index, 0, element);\n\t};\n\n\tArray.prototype.remove = function (element) {\n\t\tvar index = this.indexOf (element);\n\t\tif (index == -1) {\n\t\t\tthrow KeyError (new Error ());\n\t\t}\n\t\tthis.splice (index, 1);\n\t};\n\n\tArray.prototype.index = function (element) {\n\t\treturn this.indexOf (element)\n\t};\n\t\n\tArray.prototype.py_pop = function (index) {\n\t\tif (index == undefined) {\n\t\t\treturn this.pop ()\t// Remove last element\n\t\t}\n\t\telse {\n\t\t\treturn this.splice (index, 1) [0];\n\t\t}\n\t};\t\n\t\n\tArray.prototype.py_sort = function () {\n\t\t__sort__.apply  (null, [this].concat ([] .slice.apply (arguments)));\t// Can't work directly with arguments\n\t\t// Python params: (iterable, key = None, reverse = False)\n\t\t// py_sort is called with the Transcrypt kwargs mechanism, and just passes the params on to __sort__\n\t\t// __sort__ is def'ed with the Transcrypt kwargs mechanism\n\t};\n\t\n\tArray.prototype.__add__ = function (aList) {\n\t\treturn list (this.concat (aList))\n\t}\n\t\n\tArray.prototype.__mul__ = function (scalar) {\n\t\tvar result = this;\n\t\tfor (var i = 1; i < scalar; i++) {\n\t\t\tresult = result.concat (this);\n\t\t}\n\t\treturn result;\n\t}\n\t\n\tArray.prototype.__rmul__ = Array.prototype.__mul__;\n\t\t\n\t// Tuple extensions to Array\n\t\n\tfunction tuple (iterable) {\n\t\tvar instance = iterable ? [] .slice.apply (iterable) : [];\n\t\tinstance.__class__ = tuple;\t// Not all arrays are tuples\n\t\treturn instance;\n\t}\n\t__all__.tuple = tuple;\n\ttuple.__name__ = 'tuple';\n\t\n\t// Set extensions to Array\n\t// N.B. Since sets are unordered, set operations will occasionally alter the 'this' array by sorting it\n\t\t\n\tfunction set (iterable) {\n\t\tvar instance = [];\n\t\tif (iterable) {\n\t\t\tfor (var index = 0; index < iterable.length; index++) {\n\t\t\t\tinstance.add (iterable [index]);\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t}\n\t\tinstance.__class__ = set;\t// Not all arrays are sets\n\t\treturn instance;\n\t}\n\t__all__.set = set;\n\tset.__name__ = 'set';\n\t\n\tArray.prototype.__bindexOf__ = function (element) {\t// Used to turn O (n^2) into O (n log n)\n\t// Since sorting is lex, compare has to be lex. This also allows for mixed lists\n\t\n\t\telement += '';\n\t\n\t\tvar mindex = 0;\n\t\tvar maxdex = this.length - 1;\n\t\t\t \n\t\twhile (mindex <= maxdex) {\n\t\t\tvar index = (mindex + maxdex) / 2 | 0;\n\t\t\tvar middle = this [index] + '';\n\t \n\t\t\tif (middle < element) {\n\t\t\t\tmindex = index + 1;\n\t\t\t}\n\t\t\telse if (middle > element) {\n\t\t\t\tmaxdex = index - 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn index;\n\t\t\t}\n\t\t}\n\t \n\t\treturn -1;\n\t}\n\t\n\tArray.prototype.add = function (element) {\t\t\n\t\tif (this.indexOf (element) == -1) {\t// Avoid duplicates in set\n\t\t\tthis.push (element);\n\t\t}\n\t};\n\t\n\tArray.prototype.discard = function (element) {\n\t\tvar index = this.indexOf (element);\n\t\tif (index != -1) {\n\t\t\tthis.splice (index, 1);\n\t\t}\n\t};\n\t\n\tArray.prototype.isdisjoint = function (other) {\n\t\tthis.sort ();\n\t\tfor (var i = 0; i < other.length; i++) {\n\t\t\tif (this.__bindexOf__ (other [i]) != -1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t};\n\t\n\tArray.prototype.issuperset = function (other) {\n\t\tthis.sort ();\n\t\tfor (var i = 0; i < other.length; i++) {\n\t\t\tif (this.__bindexOf__ (other [i]) == -1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t};\n\t\n\tArray.prototype.issubset = function (other) {\n\t\treturn set (other.slice ()) .issuperset (this);\t// Sort copy of 'other', not 'other' itself, since it may be an ordered sequence\n\t};\n\t\n\tArray.prototype.union = function (other) {\n\t\tvar result = set (this.slice () .sort ());\n\t\tfor (var i = 0; i < other.length; i++) {\n\t\t\tif (result.__bindexOf__ (other [i]) == -1) {\n\t\t\t\tresult.push (other [i]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t};\n\t\n\tArray.prototype.intersection = function (other) {\n\t\tthis.sort ();\n\t\tvar result = set ();\n\t\tfor (var i = 0; i < other.length; i++) {\n\t\t\tif (this.__bindexOf__ (other [i]) != -1) {\n\t\t\t\tresult.push (other [i]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t};\n\t\n\tArray.prototype.difference = function (other) {\n\t\tvar sother = set (other.slice () .sort ());\n\t\tvar result = set ();\n\t\tfor (var i = 0; i < this.length; i++) {\n\t\t\tif (sother.__bindexOf__ (this [i]) == -1) {\n\t\t\t\tresult.push (this [i]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t};\n\t\n\tArray.prototype.symmetric_difference = function (other) {\n\t\treturn this.union (other) .difference (this.intersection (other));\n\t};\n\t\n\tArray.prototype.update = function () {\t// O (n)\n\t\tvar updated = [] .concat.apply (this.slice (), arguments) .sort ();\t\t\n\t\tthis.clear ();\n\t\tfor (var i = 0; i < updated.length; i++) {\n\t\t\tif (updated [i] != updated [i - 1]) {\n\t\t\t\tthis.push (updated [i]);\n\t\t\t}\n\t\t}\n\t};\n\t\n\tArray.prototype.__eq__ = function (other) {\t// Also used for list\n\t\tif (this.length != other.length) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.__class__ == set) {\n\t\t\tthis.sort ();\n\t\t\tother.sort ();\n\t\t}\t\n\t\tfor (var i = 0; i < this.length; i++) {\n\t\t\tif (this [i] != other [i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t};\n\t\n\tArray.prototype.__ne__ = function (other) {\t// Also used for list\n\t\treturn !this.__eq__ (other);\n\t}\n\t\t\n\tArray.prototype.__le__ = function (other) {\n\t\treturn this.issubset (other);\n\t}\n\t\t\n\tArray.prototype.__ge__ = function (other) {\n\t\treturn this.issuperset (other);\n\t}\n\t\t\n\tArray.prototype.__lt__ = function (other) {\n\t\treturn this.issubset (other) && !this.issuperset (other);\n\t}\n\t\t\n\tArray.prototype.__gt__ = function (other) {\n\t\treturn this.issuperset (other) && !this.issubset (other);\n\t}\n\t\n\t// Dict extensions to object\n\t\n\tfunction __keyIterator__ () {\n\t\treturn new __KeyIterator__ (this);\n\t}\n\t\n\tfunction __keys__ () {\n\t\tvar keys = []\n\t\tfor (var attrib in this) {\n\t\t\tif (!__specialattrib__ (attrib)) {\n\t\t\t\tkeys.push (attrib);\n\t\t\t}     \n\t\t}\n\t\treturn keys;\n\t}\n\t\t\n\tfunction __items__ () {\n\t\tvar items = []\n\t\tfor (var attrib in this) {\n\t\t\tif (!__specialattrib__ (attrib)) {\n\t\t\t\titems.push ([attrib, this [attrib]]);\n\t\t\t}     \n\t\t}\n\t\treturn items;\n\t}\n\t\t\n\tfunction __del__ (key) {\n\t\tdelete this [key];\n\t}\n\t\n\tfunction __clear__ () {\n\t\tfor (var attrib in this) {\n\t\t\tdelete this [attrib];\n\t\t}\n\t}\n\t\n\tfunction __setdefault__ (aKey, aDefault) {\n\t\tvar result = this [aKey];\n\t\tif (result != undefined) {\n\t\t\treturn result;\n\t\t}\n\t\tvar val = aDefault == undefined ? null : aDefault;\n\t\tthis [aKey] = val;\n\t\treturn val;\n\t}\n\t\n\tfunction __pop__ (aKey, aDefault) {\n\t\tvar result = this [aKey];\n\t\tif (result != undefined) {\n\t\t\tdelete this [aKey];\n\t\t\treturn result;\n\t\t}\n\t\treturn aDefault;\n\t}\t\n\t\n\tfunction __update__(aDict) {\n\t\tfor (var aKey in aDict) {\n\t\t\tthis [aKey] = aDict [aKey];\n\t\t}\n\t}\n\t\n\tfunction dict (objectOrPairs) {\n\t\tif (!objectOrPairs || objectOrPairs instanceof Array) {\t// It's undefined or an array of pairs\n\t\t\tvar instance = {};\n\t\t\tif (objectOrPairs) {\n\t\t\t\tfor (var index = 0; index < objectOrPairs.length; index++) {\n\t\t\t\t\tvar pair = objectOrPairs [index];\n\t\t\t\t\tinstance [pair [0]] = pair [1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\t\t\t\t\t\t\t\t\t\t\t\t\t// It's a JavaScript object literal\n\t\t\tvar instance = objectOrPairs;\n\t\t}\n\t\t\t\n\t\t// Trancrypt interprets e.g. {aKey: 'aValue'} as a Python dict literal rather than a JavaScript object literal\n\t\t// So dict literals rather than bare Object literals will be passed to JavaScript libraries\n\t\t// Some JavaScript libraries call all enumerable callable properties of an object that's passed to them\n\t\t// So the properties of a dict should be non-enumerable\n\t\tObject.defineProperty (instance, '__class__', {value: dict, enumerable: false, writable: true});\n\t\tObject.defineProperty (instance, 'keys', {value: __keys__, enumerable: false});\n\t\tObject.defineProperty (instance, '__iter__', {value: __keyIterator__, enumerable: false});\n\t\tObject.defineProperty (instance, 'items', {value: __items__, enumerable: false});\t\t\n\t\tObject.defineProperty (instance, 'del', {value: __del__, enumerable: false});\n\t\tObject.defineProperty (instance, 'clear', {value: __clear__, enumerable: false});\n\t\tObject.defineProperty (instance, 'setdefault', {value: __setdefault__, enumerable: false});\n\t\tObject.defineProperty (instance, 'py_pop', {value: __pop__, enumerable: false});\n\t\tObject.defineProperty (instance, 'update', {value: __update__, enumerable: false});\n\t\treturn instance;\n\t}\n\t__all__.dict = dict;\n\tdict.__name__ = 'dict';\n\t\n\t// String extensions\n\t\n\tfunction str (stringable) {\n\t\ttry {\n\t\t\treturn stringable.__str__ ();\n\t\t}\n\t\tcatch (exception) {\n\t\t\treturn new String (stringable);\n\t\t}\n\t}\n\t__all__.str = str;\t\n\t\n\tString.prototype.__class__ = str;\t// All strings are str\n\tstr.__name__ = 'str';\n\t\n\tString.prototype.__iter__ = function () {\n\t\treturn new __SeqIterator__ (this);\n\t}\n\t\t\n\tString.prototype.__repr__ = function () {\n\t\treturn (this.indexOf ('\\'') == -1 ? '\\'' + this + '\\'' : '\"' + this + '\"') .replace ('\\t', '\\\\t') .replace ('\\n', '\\\\n');\n\t};\n\t\n\tString.prototype.__str__ = function () {\n\t\treturn this;\n\t};\n\t\n\tString.prototype.capitalize = function () {\n\t\treturn this.charAt (0).toUpperCase () + this.slice (1);\n\t};\n\t\n\tString.prototype.endswith = function (suffix) {\n\t\treturn suffix == '' || this.slice (-suffix.length) == suffix;\n\t};\n\t\n\tString.prototype.find  = function (sub, start) {\n\t\treturn this.indexOf (sub, start);\n\t};\n\t\n\tString.prototype.__getslice__ = function (start, stop, step) {\n\t\tif (start < 0) {\n\t\t\tstart = this.length + start;\n\t\t}\n\t\t\n\t\tif (stop == null) {\n\t\t\tstop = this.length;\n\t\t}\n\t\telse if (stop < 0) {\n\t\t\tstop = this.length + stop;\n\t\t}\n\t\t\n\t\tvar result = '';\n\t\tif (step == 1) {\n\t\t\tresult = this.substring (start, stop);\n\t\t}\n\t\telse {\n\t\t\tfor (var index = start; index < stop; index += step) {\n\t\t\t\tresult = result.concat (this.charAt(index));\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t// Since it's worthwhile for the 'format' function to be able to deal with *args, it is defined as a property\n\t// __get__ will produce a bound function if there's something before the dot\n\t// Since a call using *args is compiled to e.g. <object>.<function>.apply (null, args), the function has to be bound already\n\t// Otherwise it will never be, because of the null argument\n\t// Using 'this' rather than 'null' contradicts the requirement to be able to pass bound functions around\n\t// The object 'before the dot' won't be available at call time in that case, unless implicitly via the function bound to it\n\t// While for Python methods this mechanism is generated by the compiler, for JavaScript methods it has to be provided manually\n\t// Call memoizing is unattractive here, since every string would then have to hold a reference to a bound format method\n\tObject.defineProperty (String.prototype, 'format', {\n\t\tget: function () {return __get__ (this, function (self) {\n\t\t\tvar args = tuple ([] .slice.apply (arguments).slice (1));\t\t\t\n\t\t\tvar autoIndex = 0;\n\t\t\treturn self.replace (/\\{(\\w*)\\}/g, function (match, key) { \n\t\t\t\tif (key == '') {\n\t\t\t\t\tkey = autoIndex++;\n\t\t\t\t}\n\t\t\t\tif (key == +key) {\t// So key is numerical\n\t\t\t\t\treturn args [key] == undefined ? match : args [key];\n\t\t\t\t}\n\t\t\t\telse {\t\t\t\t// Key is a string\n\t\t\t\t\tfor (var index = 0; index < args.length; index++) {\n\t\t\t\t\t\t// Find first 'dict' that has that key and the right field\n\t\t\t\t\t\tif (typeof args [index] == 'object' && args [index][key] != undefined) {\n\t\t\t\t\t\t\treturn args [index][key];\t// Return that field field\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn match;\n\t\t\t\t}\n\t\t\t});\n\t\t});},\n\t\tenumerable: true\n\t});\n\t\n\tString.prototype.isnumeric = function () {\n\t\treturn !isNaN (parseFloat (this)) && isFinite (this);\n\t};\n\t\n\tString.prototype.join = function (strings) {\n__pragma__ ('ifdef', '__esv6__')\n\t\tstrings = Array.from (strings);\t// Much faster than iterating through strings char by char\n__pragma__ ('endif')\n\t\treturn strings.join (this);\n\t};\n\t\n\tString.prototype.lower = function () {\n\t\treturn this.toLowerCase ();\n\t};\n\t\n\tString.prototype.py_replace = function (old, aNew, maxreplace) {\n\t\treturn this.split (old, maxreplace) .join (aNew);\n\t};\n\t\n\tString.prototype.lstrip = function () {\n\t\treturn this.replace (/^\\s*/g, '');\n\t};\n\t\n\tString.prototype.rfind = function (sub, start) {\n\t\treturn this.lastIndexOf (sub, start);\n\t};\n\t\n\tString.prototype.rsplit = function (sep, maxsplit) {\t// Combination of general whitespace sep and positive maxsplit neither supported nor checked, expensive and rare\n\t\tif (sep == undefined || sep == null) {\n\t\t\tsep = /\\s+/;\n\t\t\tvar stripped = this.strip ();\n\t\t}\n\t\telse {\n\t\t\tvar stripped = this;\n\t\t}\n\t\t\t\n\t\tif (maxsplit == undefined || maxsplit == -1) {\n\t\t\treturn stripped.split (sep);\n\t\t}\n\t\telse {\n\t\t\tvar result = stripped.split (sep);\n\t\t\tif (maxsplit < result.length) {\n\t\t\t\tvar maxrsplit = result.length - maxsplit;\n\t\t\t\treturn [result.slice (0, maxrsplit) .join (sep)] .concat (result.slice (maxrsplit));\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t};\n\t\n\tString.prototype.rstrip = function () {\n\t\treturn this.replace (/\\s*$/g, '');\n\t};\n\t\n\tString.prototype.py_split = function (sep, maxsplit) {\t// Combination of general whitespace sep and positive maxsplit neither supported nor checked, expensive and rare\n\t\tif (sep == undefined || sep == null) {\n\t\t\tsep = /\\s+/\n\t\t\tvar stripped = this.strip ();\n\t\t}\n\t\telse {\n\t\t\tvar stripped = this;\n\t\t}\n\t\t\t\n\t\tif (maxsplit == undefined || maxsplit == -1) {\n\t\t\treturn stripped.split (sep);\n\t\t}\n\t\telse {\n\t\t\tvar result = stripped.split (sep);\n\t\t\tif (maxsplit < result.length) {\n\t\t\t\treturn result.slice (0, maxsplit).concat ([result.slice (maxsplit).join (sep)]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t};\n\t\n\tString.prototype.startswith = function (prefix) {\n\t\treturn this.indexOf (prefix) == 0;\n\t};\n\t\n\tString.prototype.strip = function () {\n\t\treturn this.trim ();\n\t};\n\t\t\n\tString.prototype.upper = function () {\n\t\treturn this.toUpperCase ();\n\t};\n\t\n\tString.prototype.__mul__ = function (scalar) {\n\t\tvar result = this;\n\t\tfor (var i = 1; i < scalar; i++) {\n\t\t\tresult = result + this;\n\t\t}\n\t\treturn result;\n\t}\n\t\n\tString.prototype.__rmul__ = String.prototype.__mul__;\n\t\t\n\t// General operator overloading, only the ones that make most sense in matrix and complex operations\n\t\n\tvar __neg__ = function (a) {\n\t\tif (typeof a == 'object' && '__neg__' in a) {\n\t\t\treturn a.__neg__ ();\n\t\t}\n\t\telse {\n\t\t\treturn -a;\n\t\t}\n\t};  \n\t__all__.__neg__ = __neg__;\n\t\n\tvar __matmul__ = function (a, b) {\n\t\treturn a.__matmul__ (b);\n\t};  \n\t__all__.__matmul__ = __matmul__;\n\t\n\tvar __pow__ = function (a, b) {\n\t\tif (typeof a == 'object' && '__pow__' in a) {\n\t\t\treturn a.__pow__ (b);\n\t\t}\n\t\telse if (typeof b == 'object' && '__rpow__' in b) {\n\t\t\treturn b.__rpow__ (a);\n\t\t}\n\t\telse {\n\t\t\treturn Math.pow (a, b);\n\t\t}\n\t};\t\n\t__all__.pow = __pow__;\n\t\n\tvar __mul__ = function (a, b) {\n\t\tif (typeof a == 'object' && '__mul__' in a) {\n\t\t\treturn a.__mul__ (b);\n\t\t}\n\t\telse if (typeof b == 'object' && '__rmul__' in b) {\n\t\t\treturn b.__rmul__ (a);\n\t\t}\n\t\telse if (typeof a == 'string') {\n\t\t\treturn a.__mul__ (b);\n\t\t}\n\t\telse if (typeof b == 'string') {\n\t\t\treturn b.__rmul__ (a);\n\t\t}\n\t\telse {\n\t\t\treturn a * b;\n\t\t}\n\t};  \n\t__all__.__mul__ = __mul__;\n\t\n\tvar __div__ = function (a, b) {\n\t\tif (typeof a == 'object' && '__div__' in a) {\n\t\t\treturn a.__div__ (b);\n\t\t}\n\t\telse if (typeof b == 'object' && '__rdiv__' in b) {\n\t\t\treturn b.__rdiv__ (a);\n\t\t}\n\t\telse {\n\t\t\treturn a / b;\n\t\t}\n\t};  \n\t__all__.__div__ = __div__;\n\t\n\tvar __add__ = function (a, b) {\n\t\tif (typeof a == 'object' && '__add__' in a) {\n\t\t\treturn a.__add__ (b);\n\t\t}\n\t\telse if (typeof b == 'object' && '__radd__' in b) {\n\t\t\treturn b.__radd__ (a);\n\t\t}\n\t\telse {\n\t\t\treturn a + b;\n\t\t}\n\t};  \n\t__all__.__add__ = __add__;\n\t\n\tvar __sub__ = function (a, b) {\n\t\tif (typeof a == 'object' && '__sub__' in a) {\n\t\t\treturn a.__sub__ (b);\n\t\t}\n\t\telse if (typeof b == 'object' && '__rsub__' in b) {\n\t\t\treturn b.__rsub__ (a);\n\t\t}\n\t\telse {\n\t\t\treturn a - b;\n\t\t}\n\t};  \n\t__all__.__sub__ = __sub__;\n\t\n\tvar __eq__ = function (a, b) {\n\t\tif (typeof a == 'object' && '__eq__' in a) {\n\t\t\treturn a.__eq__ (b);\n\t\t}\n\t\telse {\n\t\t\treturn a == b\n\t\t}\n\t};\n\t__all__.__eq__ = __eq__;\n\t\t\n\tvar __ne__ = function (a, b) {\n\t\tif (typeof a == 'object' && '__ne__' in a) {\n\t\t\treturn a.__ne__ (b);\n\t\t}\n\t\telse {\n\t\t\treturn a != b\n\t\t}\n\t};\n\t__all__.__ne__ = __ne__;\n\t\t\n\tvar __lt__ = function (a, b) {\n\t\tif (typeof a == 'object' && '__lt__' in a) {\n\t\t\treturn a.__lt__ (b);\n\t\t}\n\t\telse {\n\t\t\treturn a < b\n\t\t}\n\t};\n\t__all__.__lt__ = __lt__;\n\t\t\n\tvar __le__ = function (a, b) {\n\t\tif (typeof a == 'object' && '__le__' in a) {\n\t\t\treturn a.__le__ (b);\n\t\t}\n\t\telse {\n\t\t\treturn a <= b\n\t\t}\n\t};\n\t__all__.__le__ = __le__;\n\t\t\n\tvar __gt__ = function (a, b) {\n\t\tif (typeof a == 'object' && '__gt__' in a) {\n\t\t\treturn a.__gt__ (b);\n\t\t}\n\t\telse {\n\t\t\treturn a > b\n\t\t}\n\t};\n\t__all__.__gt__ = __gt__;\n\t\t\n\tvar __ge__ = function (a, b) {\n\t\tif (typeof a == 'object' && '__ge__' in a) {\n\t\t\treturn a.__ge__ (b);\n\t\t}\n\t\telse {\n\t\t\treturn a >= b\n\t\t}\n\t};\n\t__all__.__ge__ = __ge__;\n\t\t\n\tvar __getitem__ = function (container, key) {\t\t\t\t\t\t\t// Slice c.q. index, direct generated call to runtime switch\n\t\tif (typeof container == 'object' && '__getitem__' in container) {\n\t\t\treturn container.__getitem__ (key);\t\t\t\t\t\t\t\t// Overloaded on container\n\t\t}\n\t\telse {\n\t\t\treturn container [key];\t\t\t\t\t\t\t\t\t\t\t// Container must support bare JavaScript brackets\n\t\t}\n\t};\n\t__all__.__getitem__ = __getitem__;\n\n\tvar __setitem__ = function (container, key, value) {\t\t\t\t\t// Slice c.q. index, direct generated call to runtime switch\n\t\tif (typeof container == 'object' && '__setitem__' in container) {\n\t\t\tcontainer.__setitem__ (key, value);\t\t\t\t\t\t\t\t// Overloaded on container\n\t\t}\n\t\telse {\n\t\t\tcontainer [key] = value;\t\t\t\t\t\t\t\t\t\t// Container must support bare JavaScript brackets\n\t\t}\n\t};\n\t__all__.__setitem__ = __setitem__;\n\n\tvar __getslice__ = function (container, lower, upper, step) {\t\t\t// Slice only, no index, direct generated call to runtime switch\n\t\tif (typeof container == 'object' && '__getitem__' in container) {\n\t\t\treturn container.__getitem__ ([lower, upper, step]);\t\t\t// Container supports overloaded slicing c.q. indexing\n\t\t}\n\t\telse {\n\t\t\treturn container.__getslice__ (lower, upper, step);\t\t\t\t// Container only supports slicing injected natively in prototype\n\t\t}\n\t};\n\t__all__.__getslice__ = __getslice__;\n\n\tvar __setslice__ = function (container, lower, upper, step, value) {\t// Slice, no index, direct generated call to runtime switch\n\t\tif (typeof container == 'object' && '__setitem__' in container) {\n\t\t\tcontainer.__setitem__ ([lower, upper, step], value);\t\t\t// Container supports overloaded slicing c.q. indexing\n\t\t}\n\t\telse {\n\t\t\tcontainer.__setslice__ (lower, upper, step, value);\t\t\t\t// Container only supports slicing injected natively in prototype\n\t\t}\n\t};\n\t__all__.__setslice__ = __setslice__;\n\n\tvar __call__ = function (/* <callee>, <params>* */) {\n\t\tvar args = [] .slice.apply (arguments)\n\t\tif (typeof args [0] == 'object' && '__call__' in args [0]) {\n\t\t\treturn args [0] .__call__ .apply (null,  args.slice (1));\n\t\t}\n\t\telse {\n\t\t\treturn args [0] .apply (null, args.slice (1));\n\t\t}\t\t\n\t};\n\t__all__.__call__ = __call__;\n\n",
		"def getRgba (*color):\n\treturn 'rgba({},{},{},{})'.format (*color)\n\t\ndef getHex (*color):\n\tresult = ''\n\tfor component in color [:3]:\n\t\tresult += hexDigits [component // 16] + hexDigits [component % 16]\n\treturn result\n\t\nhexDigits = '0123456789abcdef'\n\nblack = getHex (0,0,0,1)\nwhite = getHex (255, 255, 255, 1)\n\nlogoRed = getHex (255, 68, 34, 1)\nlogoGreen = getHex (34, 136, 0, 1)\nlogoBlue = getHex (51, 102, 255, 1)\nlogoYellow = getHex (255, 176, 0, 1)\n\ndarkBrown = getHex (102, 68, 34, 1)\nlightBrown = getHex (170, 119, 68, 1)\n\ntransparentLogoGreen = getRgba (34, 136, 0, 0.8)\nveryTransparentLogoGreen = getRgba (34, 136, 0, 0.1)\n\nlightGray = getHex (245, 245, 245)\nmiddleGray = getHex (231, 231, 231)\ndarkGray = getHex (208,208,208)\n\npanoramaPink = getHex (229, 217, 217)\n\nclass Stripe:\n\tdef __init__ (self, colors = [white, lightGray]):\n\t\tself.colors = colors;\n\t\tself.nColors = len (self.colors)\n\t\tself.iColor = -1\n\n\tdef __call__ (self):\n\t\tself.iColor = (self.iColor + 1) % self.nColors\n\t\treturn self.colors [self.iColor]\n\t\t\ndef indent (plainText):\n\treturn '\\n'.join (['    ' + line for line in plainText.replace ('\\t', '    ') .split ('\\n')])\n\t\t\ndef encodeTags (plainText):\n\treturn plainText.replace ('<', '&lt;') .replace ('>', '&gt;')\n\ndef decodeTags (encodedText):\n\treturn encodedText.replace ('&lt;', '<') .replace ('&gt;', '>')\n\t\t",
		"from base import *\n\nclass All:\n\tdef __init__ (self, subjectName):\n\t\tself.subjectName = subjectName\n\t\tself.subjectNames = ['home', 'documentation', 'download', 'contribute', 'gallery', 'live_edit']\n\t\t\n\t\t# The logo has menu index -1, the regular menu buttons start at 0\n\t\tself.menuIndex = self.subjectNames.index (self.subjectName) - 1\n\t\t\n\t\tself.landscapeButtonTexts = ['docs & demos', 'download', 'join | ask', 'gallery', 'live edit']\n\t\tself.portraitButtonTexts = ['docs', 'get', 'join', 'show', 'live']\n\t\n\t\t# Find general\n\t\t\n\t\tself.all = document.querySelector ('*')\n\t\tself.body = document.querySelector ('body')\n\t\tself.html = document.querySelector ('html')\t\t\n\t\tself.lanes = list (document.querySelectorAll ('.lane'))\n\t\n\t\t# Find fixed\n\t\t\n\t\tself.fixed = document.querySelector ('.fixed')\n\t\tself.logo = document.querySelector ('.fixed .logo')\n\t\tself.logoImage = document.querySelector ('.fixed .logo img')\n\t\tself.logoTitle = document.querySelector ('.fixed .logo .title')\n\t\tself.logoTitleSpans = list (document.querySelectorAll ('.fixed .logo .title span'))\n\t\tself.logoSubtitle = document.querySelector ('.fixed .logo .subtitle')\n\t\tself.forkMe = document.querySelector ('.fixed .fork-me')\n\t\tself.buttons = list (document.querySelectorAll ('.fixed .menu-bar .button'))\n\t\tself.buttonTexts = list (document.querySelectorAll ('.fixed .menu-bar .button .text'))\n\t\t\n\t\t# Find moving\n\t\t\n\t\tself.moving = document.querySelector ('.moving')\n\t\t\n\t\tif self.subjectName == 'home':\n\t\t\tself.splash = document.querySelector ('.moving .splash')\n\t\t\tself.announcementBar = document.querySelector ('.moving .announcement-bar')\n\t\t\tself.panorama = document.querySelector ('.moving .panorama')\n\t\t\tself.summaryDivs = list (document.querySelectorAll ('.moving .summary div'))\n\t\telif self.subjectName == 'live_edit':\n\t\t\tself.turtleFrame = document.querySelector ('.moving .turtle iframe')\n\t\t\n\t\tself.prompt = document.querySelector ('.moving .footer .prompt')\n\t\tself.share =  document.querySelector ('.moving .footer .share')\n\t\t\n\t\t# End fouc prevention\n\t\t\n\t\tself.html.style.visibility = 'visible'\n\n\t\t# Connect and set size\n\t\t\n\t\tself.onResize (self, True)\n\t\twindow.onresize = self.onResize\n\t\twindow.onscroll = self.onResize\t# Needed for iPhone, since size changes silently when scolling\n\t\t\n\t\t# Connect logo\n\t\t\n\t\tself.logo.onclick = lambda: self.onPressButton (-1)\n\t\t\n\t\t# Connect and color buttons\n\t\t\n\t\tfor index, button in enumerate (self.buttons):\n\t\t\tbutton.onmouseover = (lambda i: lambda: self.onHoverButton (i, True)) (index)\n\t\t\tbutton.onmouseout = (lambda i: lambda: self.onHoverButton (i, False)) (index)\n\t\t\tbutton.onclick = (lambda i: lambda: self.onPressButton (i)) (index)\n\t\t\tbutton.style.backgroundColor = middleGray if index == self.menuIndex else 'transparent'\n\t\t\t\n\t\t# Load listings\n\t\t\n\t\tfor editMode in ['htmlmixed', 'python', 'javascript']:\n\t\t\tfor code in list (document.querySelectorAll ('.code' '.{}'.format (editMode))):\n\t\t\t\teditor = CodeMirror.fromTextArea (code, {\n\t\t\t\t\t'mode': {\n\t\t\t\t\t\t'name': editMode,\n\t\t\t\t\t\t'version': 3,\n\t\t\t\t\t\t'singleLineStringErrors': False\n\t\t\t\t\t},\n\t\t\t\t\t'lineWrapping': True\n\t\t\t\t})\n\t\t\t\t\n\t\t\t\tcharWidth = editor.defaultCharWidth()\n\t\t\t\t\n\t\t\t\tdef renderLine (cm, line, elt):\n\t\t\t\t\tnonlocal charWidth;\n\t\t\t\t\toff = CodeMirror.countColumn (line.text, null, cm.getOption ('tabSize')) * charWidth\n\t\t\t\t\telt.style.textIndent = '-' + off + 'px'\n\t\t\t\t\telt.style.paddingLeft = (4 + off) + 'px'\t\t\t\t\n\t\t\t\t\t\n\t\t\t\teditor.on ('renderLine', renderLine)\n\t\t\t\t\n\t\t\t\teditor.setValue (indent (decodeTags (code.innerHTML)))\n\t\t\t\t# editor.refresh ()\t# Not needed with read-only content\n\t\t\t\t\t\t\t\n\tdef onResize (self, forceReorient):\t\t\n\t\tbodyStyle = window.getComputedStyle (self.body, null)\n\t\tself.windowWidth = int (bodyStyle.width [:-2])\n\t\tself.windowHeight = int (bodyStyle.height [:-2])\n\t\tself.windowArea = Math.sqrt (self.windowHeight * self.windowWidth)\n\t\t\n\t\tself.oldLandscape = self.landscape\n\t\tself.landscape = self.windowWidth > self.windowHeight\n\n\t\tif forceReorient or self.landscape != self.oldLandcape:\n\t\t\tself.reorient ()\n\t\t\tself.oldLandscape = self.landscape\n\t\n\t\t# All\n\t\t\n\t\tself.all.style.fontSize = (0.014 if self.landscape else 0.025) * self.windowArea\n\t\t\n\t\t# Fixed\n\t\n\t\tself.fixed.style.height = 0.15 * self.windowHeight\n\t\t\n\t\tself.logo.style.top = 0.01 * self.windowHeight\n\t\t\n\t\tself.logoImage.style.width = 0.08 * self.windowHeight\n\t\tself.logoImage.style.height = 0.08 * self.windowHeight\n\t\t\t\t\n\t\tself.logoTitle.style.left = 0.08 * self.windowHeight \n\t\tself.logoTitle.style.top = -0.01 * self.windowHeight\n\t\tself.logoTitle.style.fontSize = 0.06 * self.windowHeight\n\t\t\n\t\tfor logoTitleSpan in self.logoTitleSpans:\n\t\t\tlogoTitleSpan.style.marginRight = -0.02 * self.windowHeight\n\n\t\tself.logoSubtitle.style.left = 0.09 * self.windowHeight \n\t\tself.logoSubtitle.style.top = 0.055 * self.windowHeight \n\t\tself.logoSubtitle.style.fontSize = 0.021 * self.windowHeight\n\t\t\n\t\t# Moving\n\t\t\n\t\tself.moving.style.top = 0.15 * self.windowHeight\n\t\t\n\t\tif self.subjectName == 'home':\n\t\t\tself.splash.style.minHeight = 0.85 * self.windowHeight\n\t\t\tself.announcementBar.style.height = 0.04 * self.windowHeight\n\t\t\tself.panorama.style.height = 0.35 * self.windowHeight\n\t\t\t\n\t\t\tfor summaryDiv in self.summaryDivs:\n\t\t\t\tsummaryDiv.style.float = 'left' if self.landscape else 'top'\n\t\t\t\tsummaryDiv.style.width =  '29%' if self.landscape else '95%'\n\t\telif self.subjectName == 'live_edit':\n\t\t\tself.turtleFrame.style.height = 0.85 * self.windowHeight\n\t\t\t\n\tdef reorient (self):\n\t\t# All\n\n\t\tif self.landscape:\n\t\t\tfor lane in self.lanes:\n\t\t\t\tlane.style.width = '60%'\n\t\t\t\tlane.style.paddingLeft = '20%'\n\t\t\t\tlane.style.paddingRight = '20%'\n\t\t\t\t\n\t\t\tself.forkMe.style.visibility = 'visible' if self.windowHeight > 700 else 'hidden'\n\n\t\t\tfor index, buttonText in enumerate (self.buttonTexts):\n\t\t\t\tbuttonText.innerHTML = self.landscapeButtonTexts [index]\n\t\t\n\t\t\tself.prompt.style.left = 0\n\t\t\tself.prompt.style.top = 20\n\n\t\t\tself.share.style.left = None\n\t\t\tself.share.style.right = 0\n\t\t\tself.share.style.top = 20\n\t\telse:\n\t\t\tfor lane in self.lanes:\n\t\t\t\tlane.style.width = '94%'\n\t\t\t\tlane.style.paddingLeft = '3%'\n\t\t\t\tlane.style.paddingRight = '3%'\n\t\t\t\t\n\t\t\tself.forkMe.style.visibility = 'hidden'\n\n\t\t\tfor index, buttonText in enumerate (self.buttonTexts):\n\t\t\t\tbuttonText.innerHTML = self.portraitButtonTexts [index]\n\t\t\t\t\n\t\t\tself.prompt.style.left = 0\n\t\t\tself.prompt.style.top = 20\n\t\t\t\n\t\t\tself.share.style.left = 0\n\t\t\tself.share.style.right = None\n\t\t\tself.share.style.top = 50\n\t\t\n\tdef onHoverButton (self, menuIndex, state):\n\t\tif menuIndex != self.menuIndex:\n\t\t\tself.buttons [menuIndex] .style.backgroundColor = lightGray if state else 'transparent'\n\t\t\t\n\tdef onPressButton (self, menuIndex):\n\t\tself.menuIndex = menuIndex\n\t\twindow.location.href = self.subjectNames [self.menuIndex + 1]\t# Negative index means home page\n\t\t"
	],
	"mappingstIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoh2CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AChDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAIA;AAIA;AACA;AACA;AAIA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AASA;AAEA;AAEA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAIA;AAIA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}