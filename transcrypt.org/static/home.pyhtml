base_pyhtml = self.app.importFromFile ('base.pyhtml', 'base_pyhtml')
base_pycss = self.app.importFromFile ('base.pycss', 'base_pycss')
home_pycss = self.app.importFromFile ('home.pycss', 'home_pycss')

self.content = '''
	<html>
		<head>
			''' + base_pyhtml.getAdmin ('home') + '''
			
			<title>Transcrypt - Python in the browser - Lean, fast, open!</title>
			<meta name="description" lang="en" xml:lang="en" content="The Transcrypt Python to JavaScript compiler makes it possible to program lean and fast browser applications in Python. Transcrypt applications can use any JavaScript library and can also run on top of Node.js or be used in combination with Django.">
			<meta name="keywords" lang="en" xml:lang="en" content="python browser javascript compiler transpiler">
		
			<style>
				''' + base_pycss.getAll () + '''
				''' + home_pycss.getAll () + '''
			</style>
		</head>
		<body>
			''' + base_pyhtml.getFixed () + '''

			<div class="moving">
				<div class="splash section">
					<div class="announcement-bar">
						<div class="text lane">
							Latest stable release: 3.6.54 'Paris'
						</div>
					</div>
					
					<div class="panorama">
						<div class="slogan">
							Lean, fast, open!
						</div>
					</div>
					
					<div class="summary lane">
						<div>
							<h1>Clear standard syntax</h1>
							
							<p>
							Transcrypt has exactly the same clear, powerful syntax that Python is famous for, without the need for any proprietary extensions.
							
							<p>
							It supports string slicing with [i:j:k], matrix and vector operations with +, -, *, / and more, out of the box.
							
							<p>
							It compiles to compact, readable JavaScript that can be debugged from the Python source code using sourcemaps.
						</div>
						<div>
							<h1>Superior scalability</h1>

							<p>
							Python was designed for large scale programs from the ground up.
							
							<p>
							Hierarchical modules, local classes and multiple inheritance are all supported by Transcrypt, allowing a flexible, yet stable overall structure.

							<p>
							Transcrypt comes integrated with a static type validator, a linter and a minifier, enabling effective cooperation of large teams on extensive projects.
						</div>
						<div>
							<h1>One project, one language</h1>
							
							<p>
							Python is used everywhere at the back-end, from web servers to scientific computing. Now you can use it at the front-end as well.
							
							<p>
							Transcrypt offers seamless access to any JavaScript library and also runs on top of Node.js.
							
							<p>
							Python source code and JavaScript target code roughly have the same size, so your pages load as fast as ever.
						</div> <!-- summary -->
					</div>
				</div>	<!-- splash -->
				
				<div class="flowchart lane section">
					<h1>Installing and using it is simple</h2>
					
					<img src="http://www.transcrypt.org/illustrations/workflow.png" alt="Transcrypt workflow">
				</div>
				<div class="introduction lane section">		
					<h1>Harness the power of Python for increasingly complex web applications</h1>
					
					<p>
					Transcrypt produces readable, debuggable, lean and mean JavaScript. The minified <u>downloads are measured in kB's</u> rather than MB's. And it's precompiled for speed. As for the availabity of libraries, a clear choice has been made to seamlessly integrate with the JavaScript universe of free, high-quality web oriented software. No need to reinvent the wheel. Calling JavaScript functions from Python, attaching Python event handlers to DOM elements, passing native data between Python and JavaScript, it all happens without any conversion or special syntax.
					<br>
					
					<p>
					Transcrypt stays as close to the Python original as possible without sacrificing performance. <u>Multiple inheritance</u>, recursive tuple assignment, multi-loop nested list comprehensions, LHS and RHS extended slices, assignment of bound functions, lambdas, named, default, *args and **kwargs parameters, properties, optional operator overloading, iterators, generators, selective exception handling and a hierarchical module system are just a few of its characteristics that make this clear. Transcrypt is parsed by CPython's AST module, so no surprises there.
					 
					<p>
					Transcrypt features <u>multi-level sourcemaps</u>, so you can debug your application comfortably, working from the Python source code in your browser, even if the generated JavaScript is minified. It also has a unique autotest feature that makes back to back regression testing with CPython a snap.

					<p>
					Transcrypt comes with 3rd party tools for <u>optional static type validation</u> (experimental), lightweight consistency checks and minification, all at the tip of a command line switch. It can generate code for JavaScript 5 and 6. All tools are fully integrated in the distribution, one simple pip install will get you started. 
				</div> <!-- introduction -->
				
				<div class="correspondence section">
					<div class="lane">
						<h1>Even with multiple inheritance there's a simple correspondence between Python and JavaScript</h1>
						
						<p>
						The ability to understand exactly what's going on under the hood, allows for fine grained optimizations. Speed up an inner loop? Use <i>__pragma__('js',...)</i> to freely mix Python with native JavaScript. Not that you'll need it often... An expression like <i>i+=1</i> is compiled to <i>i++</i>, and optional call caching bypasses the prototype chain, making repeated function calls even faster than handwritten JavaScript.
					</div>
					
					<img src="illustrations/class_compare_doc.png" alt="Python and JavaScript side by side">
				</div> <!-- correspondence -->
				
				<div class="mix section">
					<div class="lane">
						<h1>Transcrypt can be mixed seamlessly with JavaScript and HTML</h1>
						
						<p>
						Anything you can do in JavaScript, you can do in Transcrypt. You'll always have immediate access to the newest libraries, use the newest DOM functions, interact with the newest HTML or CSS. Just join the party without restrictions.
					</div>
					
					<img src="illustrations/hello_doc.png" alt="Seamless mix with JavaScript and HTML">
				</div> <!-- mix -->
				
				<div class="pragmas lane section">
					<h1>Transcrypt is suitable for a broad area of applications</h1>
					
					<p>
					Transcrypt supports customization through the use of <i>pragmas</i>. Pragmas are function calls that allow you to switch on and off compiler facilities locally, to conditionally compile code, comparable to the use of <i>#ifdef...#endif</i> and <i>#ifndef...#endif</i> in C++ and to include native JavaScript code anywhere in your program. They also allow efficient, selective operator overloading.
					
					<p>
					Many people know Python from internet programming, especially from the Django webserver. But it is also tremendously popular in world of scientific computing and education. Selective operator overloading enables the use of elegant notation for mathematical expressions, making Transcrypt an attractive choice for writing small to medium scale numerical applications that have to run in a browser.
					
					<p class="formulas">
					Being able to write matrix multiplication and vector addition as
					<span class="formula">v3 = M3 * (M1 * v1 + M2 * v2)</span>
					rather than
					<span class="formula">v3 = multiply (M3, add (multiply (M1, v1, multiply (M2, v2))))</span>
					is a big advantage if the formulas get complicated.
					
					<p class="formulas">
					Being able to write
					<span class="formula">c = (3 + 5j) * (-4 - 2j) + (1 + 1j)</span>
					rather than
					<span class="formula">c = add (multiply (complex (3, 5), complex (-4, -2)), complex (1, 1)</span>
					when complex numbers are involved is equally handy.
					
					<p class="formulas">
					While operator overloading is very powerful, when compiling to JavaScript it is important to be able to switch it on and off selectively to prevent something simple like
					<span class="formula">x = 3 * 4 + 5 * 6</span>
					from being translated to
					<span class="formula">x = add (multiply (3, 4), multiply (5, 6)</span>
					everywhere in your program.

					<p>
					An example of the efficient use of operator overloading is <a href="http://www.transcrypt.org/numscrypt/numscrypt.html">Numscrypt</a>. Numscrypt is a port of a small part of Numpy to Transcrypt. It currently supports real and complex matrix and vector multiplication, division, addition, subtraction, dot product, inverse, transpose, FFT, IFFT, FFT2 and IFFT2, using Numpy's familiar notation, including array slicing. To achieve speed, Numscrypt uses JavaScript TypedArray's under the hood. While it's just as fast and compact as comparable native JavaScript numerical libraries, its notation much more simple and concise, closely resembling mathematical notation. 
 				</div>
				
				
				<div class="free lane section">
					<h1>It's free. It's open. It's yours.</h1>
					
					<p>
					Transcrypt is licensed under the <a href="https://www.apache.org/licenses/LICENSE-2.0">Apache 2.0</a> open source license. You can download the source code, modify it, keep it in a locker, cut and paste from it, contribute to it, or make it part of your product.
				</div> <!-- free -->
				
				''' + base_pyhtml.getFooter () + '''
			</div> <!-- moving -->
		</body>
	'''
