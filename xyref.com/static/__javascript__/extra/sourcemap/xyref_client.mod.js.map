{
	"version": 3,
	"file": "D:/activ_tosh/web/sites/xyref.com/static/__javascript__/xyref_client.mod.js",
	"sources": [
		"D:/activ_tosh/web/sites/xyref.com/static/xyref_client.py"
	],
	"sourcesContent": [
		"__pragma__ ('alias', 'jq', '$')\n__pragma__ ('skip')\nalert = aPrint = document = 0\n__pragma__ ('noskip')\n\ndragObject = None\ndragOffset = [None, None]\n\nclass Canvas:\n\twidth = 5000\n\theight = 3000\n\tdef __init__ (self):\n\t\tself.div = document.createElement ('div')\n\t\tself.div.style.position = 'absolute'\n\t\tself.div.style.width = self.width\n\t\tself.div.style.height = self.height\n\t\tself.div.ondragover = self.dragOver\n\t\tself.div.ondrop = self.drop\n\t\tdocument.body.appendChild (self.div)\n\t\t\n\t\tself.objects = []\t\t\n\t\tself.dirty = False # Should be redundant\t\t\n\t\tself.downloadState ()\n\t\t\t\t\n\tdef dragOver (self, e):\n\t\te.dataTransfer.dropEffect = 'move'\n\t\te.preventDefault ()\n\t\t\n\tdef drop (self, e):\n\t\tif True or self.stateDownloaded:\n\t\t\tself.dirty = True\n\t\t\t\n\t\t\tnonlocal dragObject;\n\t\t\tif not dragObject:\n\t\t\t\tdragObject = Image (e.dataTransfer.getData ('text/plain'))\n\t\t\tdragObject.x = e.x - dragOffset [0]\n\t\t\tdragObject.y = e.y - dragOffset [1]\n\t\t\tdragObject = None\t# Leaves image intact, but dragObj\n\t\t\t\n\t\te.preventDefault ()\n\t\t\n\tdef getState (self):\n\t\tpass\n\t\t#return JSON.stringify ([anObject.getState () for anObject in self.objects])\n\t\t\n\tdef setState (self, value):\n\t\tpass\n\t\t#self.objects = [Image (state ['url'], state ['x'], state ['y']) for state in JSON.parse (value)]\n\t\n\tdef downloadState (self):\t\n\t\tdef ready (result):\n\t\t\tprint ('download ready')\n\t\t\tself.stateDownloaded = True\n\t\t\tself.dirty = False\n\t\t\tself.div.style.backgroundColor = '#7777ff'\n\t\t\tself.setState (result.text)\n\n\t\tself.stateDownloaded = False\n\t\tself.div.style.backgroundColor = '#000000'\n\t\t\n\t\tjq.get ('http://www.xyref.com/download_state', '', ready, 'json')\n\t\t\n\tdef uploadState (self):\n\t\tdef ready (result):\n\t\t\tprint ('upload ready')\n\t\t\tself.dirty = False\n\t\t\t\n\t\tif self.dirty:\t\t\t\n\t\t\tjq.post ('http://www.xyref.com/upload_state', 'HERE SHOULD BE DATA!!!', ready, 'json')\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\t\t\ncanvas = Canvas ()\n\nclass Image:\n\twidth = 150\n\theight = 150\n\tdef __init__ (self, url, x = 0, y = 0):\n\t\tself.div = document.createElement ('div')\n\t\tself.div.xyrefObject = self\n\t\tself.div.style.position = 'absolute'\n\t\tself.div.style.width = self.width\n\t\tself.div.style.height = self.height\n\t\tself.div.style.backgroundRepeat = 'no-repeat'\n\t\tself.div.style.backgroundSize = 'contain'\n\t\tself.div.draggable = True\n\t\tself.div.onmouseover = self.mouseOver\n\t\tself.div.ondragstart = self.dragStart\n\t\tself.div.oncontextmenu = self.contextMenu\n\t\tdocument.body.appendChild (self.div)\n\t\t\n\t\tself.url = url\n\t\tself.x = x\n\t\tself.y = y\n\t\tcanvas.objects.append (self)\n\t\t\t\t\t\n\tdef mouseOver (self, e):\n\t\te.target.style.cursor = 'pointer'\n\n\tdef dragStart (self, e):\n\t\tnonlocal dragObject\n\t\tdragObject = e.target.xyrefObject\n\t\tconsole.dir (dragObject)\n\t\t\n\t\tnonlocal dragOffset\n\t\tdragOffset = [e.x - dragObject.x, e.y - dragObject.y]\n\t\t\n\t\te.dataTransfer.effectAllowed = 'move'\n\t\t\n\tdef contextMenu (self, e):\n\t\tcanvas.objects.remove (self)\n\t\tdocument.body.removeChild (self.div)\n\t\te.preventDefault ()\n\t\t\n\tdef getUrl (self):\n\t\treturn self._url\n\t\n\tdef setUrl (self, value):\n\t\tself._url = value\n\t\tself.div.style.backgroundImage = 'url(\"{}\")'.format (self._url)\n\t\t\n\turl = property (getUrl, setUrl)\n\t\n\tdef getX (self):\n\t\treturn self._x\n\t\t\n\tdef setX (self, value):\n\t\tself._x = value\n\t\tself.div.style.left = self._x\n\t\n\tx = property (getX, setX)\n\t\n\tdef getY (self):\n\t\treturn self._y\n\t\n\tdef setY (self, value):\n\t\tself._y = value\n\t\tself.div.style.top = self._y\n\t\t\n\ty = property (getY, setY)\n\t\n\tdef getState (self):\n\t\treturn {'url': self.url, 'x': self.x, 'y': self.y}\n\t\t\n\tdef setState (self, value):\n\t\tself.url = value ['url']\n\t\tself.x = value ['x']\n\t\tself.y = value ['y']\n\t\treturn self\n\n"
	],
	"mappings": "AAAA;AAKA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AA9DA;AACA;AA+DA;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAEA;AACA;AAGA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAzEA;AACA;AA6CA;AASA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}