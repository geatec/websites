base_pyhtml = self.app.importFromFile ('base.pyhtml', 'base_pyhtml')
base_pycss = self.app.importFromFile ('base.pycss', 'base_pycss')
documentation_pycss = self.app.importFromFile ('documentation.pycss', 'documentation_pycss')

from base import Stripe

stripe = Stripe ()
	
self.content = '''
	<html>
		<head>
			''' + base_pyhtml.getAdmin ('documentation') + '''
			
			<title>Transcrypt and Numscrypt - Documentation and FAQ</title>
			<meta name="description" lang="en" xml:lang="en" content="Documentation for Transcrypt and Numscrypt, FAQ, Articles and Presentations, links to StackOverflow questions and the CPython documentation.">
			<meta name="keywords" lang="en" xml:lang="en" content="Transcrypt Numscrypt documentation FAQ media articles presentations links">			
			
			<style>
				''' + base_pycss.getAll () + '''
				''' + documentation_pycss.getAll () + '''
			</style>
		</head>
		<body>
			''' + base_pyhtml.getFixed () + '''

			<div class="moving">
				<div class="documentation">
					<div class="section lane" style="background-color:''' + stripe () + '''">
						<h3>Read what you need</h3>

						<p>
						<h4><a class='mixed-link' href="docs/html/index.html" target="_blank"><img src="illustrations/monk_transcribing.png"></img>Transcrypt 3.7 Documentation</a></h4>
						Focus is on the features that are unique for Transcrypt, rather than the general features of Python. You'll find command line options, pragmas (local compiler options) and systematic code examples demonstrating all supported features. In addition you'll find examples showing how to combine Transcrypt with html and with a number of popular JavaScript libraries and platforms. Although the demo's on this site will get you started, if you plan to use Transcrypt for production, spending some time with the documentation is likely to pay off.
						
						<p>
						<h4><a class="mixed-link" href="#faq"><img src="illustrations/logo_questionmark.png"></img>Trancrypt 3.7 FAQ</a></h4> Answers to some frequenly asked questions about Transcrypt.
						
						<p>
						<h4><a class="mixed-link" href="#media"><img src="illustrations/logo_megaphone.png"></img>Media & presentations about Transcrypt in general</a></h4> Articles, mentions, talks.
						
						<p>
						<h4><a class='mixed-link' href="http://stackoverflow.com/search?q=transcrypt" target="_blank"><img src="illustrations/logo_stackoverflow.png"></img>StackOverflow</a></h4>
						StackOverflow is a handy medium to pose questions about Transcrypt. By using StackOverflow, the answer to your question can help others as well.<br>
						
						<p>
						<h4><a class="mixed-link" href="https://docs.python.org/3.7/" target="_blank"><img src="illustrations/logo_python.png"></img>Python 3.7 Documentation</a></h4> A good background reference, since Transcrypt covers most of the Python 3.7 language core and has exactly same syntax. However note that Transcrypt mostly uses JavaScript libraries rather than Python ones.
						
						<p>
						<h4><a class='mixed-link' href="numscrypt/docs/html/index.html" target="_blank"><img src="numscrypt/illustrations/abacus_square.png"></img>Numscrypt Documentation</a></h4>
						Numscrypt is a port of a small but relevant part of Numpy to Transcrypt. To achieve speed comparable to native JavaScript numerical libraries, it only supports 1D and 2D arrays and avoids reshaping or views. To find out what is already there, read the chapter about <a href="numscrypt/docs/html/supported_constructs.html" target="_blank">currently available features</a>.
						The quickest way to learn Numscrypt is to study the <a href="numscrypt/docs/html/supported_constructs.html#systematic-code-examples-a-guided-tour-of-numscrypt" target="_blank">examples</a> in its documentation.	
					</div>
					
					<div class="section lane faq" style="background-color:''' + stripe () + '''">
						<div id="faq" class="target"></div>
					
						<h3>FAQ</h3>
						
						<div id="accordion">
							<h3>What overhead can I expect when using Transcrypt rather than JavaScript?</h3>
							<div>
								The minified JavaScript code for each of your own modules is roughly just as large as the Python source code. On top of that there's a one time overhead of 20kB for Transcrypt's core and built-ins. Should you use the JavaScript 5 to 6 translator, that adds an extra 10kB. For larger projects, the overhead becomes negligeable. A project with a Python source of say 600kB tends to result in a dowload of about equal size. Moreover Python sourcecode for a certain application tends to be smaller than handwritten JavaScript source code for the same problem, due to language constructs like list comprehensions, but also due to facilities like class based OO and multiple inheritance.<br><br>
								As far as speed is concerned, in most cases it is roughly equal to the speed of hand-written JavaScript. There's quite some optimization going on. A construct like <i>i=i-1</i> will e.g. compile into <i>i--</i>. With the call caching switch on, speed will surpass the speed of straightforward hand-written JavaScript function calls. As JavaScript gradually moves to support of a richer set of data structures on the majority of browsers, Transcrypt will benefit from that by moving from emulation to directly using JavaScript equivalents. This doesn't require any changes in your source code.
							</div>
							
							<h3>I am used to interspersing all kinds of JavaScript fragments in my page. With Transcrypt what I get is a single application with possibly different entrypoints. Why is that?</h3>
							<div>
								In JavaScript small fragments of code cooperate (or interfere) via the global namespace. In Transcrypt you have one stateful application per page in its own private namespace. In general JavaScript is originally meant to add small pieces of active behaviour to an otherwise static webpage. With Transcrypt the perspective is different. A web page is considered a coherent, stateful client-side computer program, and the HTML and CSS merely serve to define its user interface. Since Transcrypt was designed to seamlessly cooperate with any JavaScript code, it can interact with existing pages that have all those JavaScript fragments. It can just call them or be called by them.
							</div>
							
							<h3>Why can't I use Python code between script tags?</h3>
							<div>
								Since Transcrypt uses precompilation on the development machine, it can be much faster and smaller than if it would use just-in-time compilation in the browser of Python source code between script tags. In the latter case compilation would take time at every page load and the compiler would have to be included in every single page that the browser requests.
							</div>
							
							<h3>Why has the choice been made to support JavaScript libraries rather than the Python standard libraries?</h3>
							<div>
								Transcrypt is designed to stand with both legs in the web world. A tidal wave of JavaScript libraries provides functionality that is meaningful in a browser or Node environment. They represent the mainstream and web developers need unimpeded access to them. Locking up developers in some clever all Pythonic world-in-a-world will not work, the internet is too dynamic for that. Of course quite some of the Python standard libraries would be useful in a browser, so there's no reason not to port them. A small number of them has been ported already and more will follow. Since Transcrypt is open source, you're invited to port your favorite library!
							</div>
							
							<h3>Can I write libraries in Transcrypt and distribute them in the JavaScript world?</h3>
							<div>
								Sure you can! Fortunately the browser-dictated prevalence of JavaScript in the internet world doesn't mean that everyone is forced to program in it. Fast, small libraries can be written in Transcrypt for any application area. And they can be used from JavaScript much like any other library. The JavaScript developers will see readable or minified JavaScript rather than Python, unless the developer chooses to include sourcemaps.<br><br>
                                
                                <i>Restriction: To achieve speed, Transcrypt adds attributes to native JavaScript objects. In the rare case another library does the same thing, this may lead to conflicts, depending on load order. While such conflicts can be avoided by using identifier aliasing, this is currently not done, since it would reduce readability of the generated JavaScript.</i>
							</div>
							
							<h3>Can I write libraries in JavaScript for Transcrypt that have their own namespace and are imported just like any other Transcrypt module?</h3>
							<div>
								Yes. Transcrypt supports the concept of a JavaScript-only module. If it doesn't find any Python files for a certain module, it will just load the JavaScript code of that module, which may be handwritten. In fact the whole '__builtin__' module is a JavaScript-only module. By the way don't be shy in abundantly commenting the JavaScript source of such modules, the minifier will strip them anyhow.
							</div>
							
							<h3>In the docs it says you can either use 3rd party JavaScript libraries as-is, or encapsulate them to have their own namespace and be used via Python's module import syntax. Shouldn't encapsulation always be done, since it gives modules a Pythonic interface, e.g. voiding the need for the __new__ () function?</h3>
							<div>
								In general: no. Completely encapsulating all JavaScript libraries you might ever use is undoable, since they typically will contain many functions you'll never need, new functions being added with every release. In many cases it is wise to connect to the JavaScript world as-is.<br><br> 
								
								But if there are a few libraries that you use very often, encapsulation is worthwhile. Also you could choose to create a stable API in the flurry of versions of a library, encapsulating only a subset of what it has to offer, probably even abstracting away the library's details to allow for flexible second sourcing.
							</div>
							
							<h3>I am using Django (or Python framework X) on the server side. Can I share code between client and server?</h3>
							<div>
								Certainly. To be shareable in this way, the sourcecode of a module has to adhere to the subset of language facilities that CPython and Transcrypt have in common. And its directory has to be in the search path of both your CPython and Transcrypt code.
							</div>
							
							<h3>I am using Node.js. Can I share Python code between client and server?</h3>
							<div>
								Since Transcrypt compiles Python to plain JavaScript, you can use it on both sides of the line. Of course you can only use facilities that are present on the platform at hand, e.g. it makes no sense to manipulate a DOM tree at the server side of a Node.js application. But anything you can do in JavaScript on client and server you can do from Python source code in Transcrypt.
							</div>
							
							<h3>I am using React.js. Can I embed JSX source code in my Python files?</h3>
							<div>
								Yes, you can. By using the xtrans pragma you can pipe embedded code to any external translator. The result will be inserted in the generated JavaScript. Using an external JSX translator is just one possibility.
							</div>
                            
							<h3>How can I use static typing?</h3>
							<div>
								Static typing support comes completely integrated in the Transcrypt distribution. All you have to do is add type annotations in your code at strategic places, e.g. API's and compile with the -ds / --dstat command line switch.
							</div>

							<h3>What should I do if I need support?</h3>
							<div>
								The first place to go is probably StackOverflow. Tag your question with [Transcrypt] and [Python] to maximize the likelyhood of a useful answer. Commercial support is available on demand, e.g. via <a href="http://www.geatec.com" target="_blank">GEATEC engineering</a>.
							</div>
                                                        
							<h3>I'd like to offer commercial support for Transcrypt. Are there any policies with regard to this?</h3>
							<div>
								You're encouraged to do so!  The only policy is that you make clear that you're in no way commercially affiliated with Transcrypt, its developers or their companies. You can drop us a mail if you like, so that we may refer people to you, on demand or via the website.
							</div>
							
							<h3>Is there a policy in place with regard to donations?</h3>
							<div>
								Transcrypt is and will remain free, and there's absolutely no obligation to donate. However if you're using it a great deal professionally and want to facilitate further development, donations are welcome.
							</div>
							
							<h3>What's the position of Numscrypt with respect to Numpy?</h3>
							<div>
								Numscrypt is a pre-release port of a tiny part of Numpy to JavaScript and, with that, to the browser environment. On one hand, Numscrypt will never even remotely be a match for Numpy and the whole ecosystem that has grown around it, especially since it is confined to interpreted execution in a browser, rather than compiled (C++) execution on a Linux cluster. If you need high-volume computing, stick to CPython, Numpy, Scipy and all that comes with it.<br><br>
								
								If you need limited computing functionality in the browser, using a much nicer notation than any JavaScript numerical library could ever provide, Numscrypt may already be a good choice depending on the problem at hand. Its storage model is much simpler than Numpy's, avoiding things like reshaping, views and unlimited dimensionality, which would require time consuming index calculations. In that sense it certainly makes the best of the limitations that apply in a browser. It can compete with numerical libraries directly written in JavaScript with regard to speed an compactness, but not yet with regard to completeness.<br><br>
								
								Besides serving as a routine low volume computational tool, Numscrypt can be used in education, enabling browser based demonstrations in the area of linear algebra and signal processing. It's also suitable as a platform to experiment with e.g. GPGPU or ASM.js.<br><br>
								
								Currently Numscrypt supports basic real and complex matrix and vector operations using slice notation and operator overloading. It also features matrix inversion, eigenvalue / eigenvector decomposition and the 1D and 2D forward and inverse Fourier Transform. What's already there is solid enough to serve as a basis for further growth.
							</div>
						</div> <!-- accordion -->
					</div>
                    
					<div class="section lane media" style="background-color:''' + stripe () + '''">
						<div id="media" class="target"></div>
					
						<h3>Media & presentations about Transcrypt in general</h3>
						
						<ul>
							<li><a href="https://www.infoq.com/articles/transcrypt-python-javascript-compiler" target="_blank">Transcrypt: Anatomy of a Python to JavaScript Compiler.</a> Background article in InfoQ by Jacques de Hooge.
							<li><a href="http://stackoverflow.com/questions/30155551/python-in-browser-how-to-choose-between-brython-pypy-js-skulpt-and-transcrypt#answer-38564424" target="_blank">Detailed personal experiences with Transcrypt and other browser Pythons.</a> Anwser to a popular question on StackOverflow by FzzyLogic.
                            <li><a href="https://wiki.python.org/moin/WebBrowserProgramming" target="_blank">Web browser programming in Python.</a> Python Wiki.
                            <li><a href="http://stromberg.dnsalias.org/~strombrg/pybrowser/python-browser.html" target="_blank">Feature comparison matrix of 24 browser Pythons.</a> Site maintained by Dan Stromberg.
							<li><a href="http://alternativeto.net/software/transcrypt" target="_blank">Relative perception of Transcrypt with respect to other browser programming tools.</a> Comparative poll.
							<li><a href="https://pythonpodcast.com/jacques-de-hooge-transcrypt.html" target="_blank">Transcrypt and the design choices underlying it.</a> Interview on PythonPodcast.com with Jacques de Hooge, initiator of the Transcrypt open source project.
							<li><a href="https://axiros.github.io/transcrypt/#" target="_blank">Reactive, isomorphic web components with unambiguous state on client and server, using Transcrypt.</a> Talk by Gunter Klessinger, founder and managing director technology innovation at <a href="http://www.axiros.com" target="_blank">Axiros</a>, held at PYCON.DE 2016.
							<li><a href="http://www.infoworld.com/article/3033047/javascript/4-tools-to-convert-python-to-javascript-and-back-again.html" target="_blank">4 tools to convert Python to JavaScript (and back again).</a> Article by Serdar Yegulalp in InfoWorld.
							<li><a href="http://www.linuxjournaldigital.com/linuxjournal/may_2017?pg=84#pg84" target="_blank">3D Imaging of Heart Activity with Open Source Software.</a> Article by Jacques de Hooge in Linux Journal about one of the projects that contributed to the motivation for writing an efficient open source Python to JavaScript compiler. The original idea for Transcrypt came from another project involving visual communication for aphasia patients.
							<li><a href="http://sdtimes.com/postgresql-security-update-release-transcrypt-python-3-5-to-javascript-transpiler-and-new-intellij-idea-16-eap-build-released-sd-times-digest-feb-12-2016" target="_blank">Transcrypt Python 3.5 to JavaScript transpiler.</a> Announcement by Christina Cardoza and Madison Moore in SDTimes.
							<!--li><a href="https://www.techtalkauthority.tk/postview/use-python-develop-client-side-applications.html" target="_blank">Use Python to develop client-side applications.</a> TechTalk by Maharshi Mukerjee.</li-->
							<li><a href="https://medium.com/@martim00/making-a-webpack-python-loader-87215d72292e" target="_blank">Making a Webpack Python loader.</a> Article by Martim Nascimento on medium.com.                         
							<li><a href="https://github.com/jashkenas/coffeescript/wiki/list-of-languages-that-compile-to-js" target="_blank">List of tools that compile to JavaScript.</a> Survey on CoffeeScript GitHub site.
							<li><a href="https://www.safaribooksonline.com/library/view/python-in-a/9781491913833/ch01.html#idm139800537970608" target="_blank">Python in a Nutshell, 3rd edition.</a> Book by Steve Holden, Anna Ravenscroft and Alex Martelli.
						</ul>
					</div>
				</div>
                
				<div>
					''' + base_pyhtml.getFooter () + '''
				</div>
			</div> <!-- moving -->
		</body>
	'''
	