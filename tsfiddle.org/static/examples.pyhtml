base_pyhtml = self.app.importFromFile ('base.pyhtml', 'base_pyhtml')
base_pycss = self.app.importFromFile ('base.pycss', 'base_pycss')
examples_pycss = self.app.importFromFile ('examples.pycss', 'examples_pycss')

from base import Stripe, listDemo, runDemo

stripe = Stripe ()

self.content = '''
	<html>
		<head>
			''' + base_pyhtml.getAdmin ('examples') + '''
			
			<title>Transcrypt and Numscrypt - Sample code</title>
			<meta name="description" lang="en" xml:lang="en" content="Transcrypt Numscrypt code examples of using various JavaScript libraries.">
			<meta name="keywords" lang="en" xml:lang="en" content="Transcrypt Numscrypt code sample example">			
						
			<style>
				''' + base_pycss.getAll () + '''
				''' + examples_pycss.getAll () + '''
			</style>
		</head>
		<body>
			''' + base_pyhtml.getFixed () + '''

			<div class="moving">
				<div class="examples">
					<div class="section lane" style="background-color:''' + stripe () + '''">
						<div id="index" class="target"></div>	
						<h3>Index</h3>
						
						<ul>
							<li><a href="#jquery_demo">jQuery</a>
							<!--li><a href="#terminal"></a-->
							<li><a href="#react_demo">React</a>
							<li><a href="#pong_demo">Fabric.js (Pong)</a>
							<li><a href="#d3js_demo">D3.js</a>
							<li><a href="#ios_app">iOS Web App (Dice)</a>
							<li><a href="#riot_demo">Riot</a>
							<li><a href="#plotly_demo">Plotly.js</a>
                            <li><a href=https://github.com/theodox/pysteroids target="_blank">github.com/theodox/pysteroids</a>
                            <li><a href=https://github.com/bunkahle/Transcrypt-Examples target="_blank">github.com/bunkahle/Transcrypt-Examples</a>
                            <li><a href=https://github.com/fzzylogic/phaser3_transcrypt_tutorial target="_blank">github.com/fzzylogic/phaser3_transcrypt_tutorial</a>
						</ul>
					</div>
					
					<div class="section lane" style="background-color:''' + stripe () + '''">
						<div id="jquery_demo" class="target"></div>
						<h3>jQuery</h3>
						
						<p>
						Despite competition, jQuery is still ubiquitous. Transcrypt and jQuery wear well together.
						
						<p>
						''' + runDemo ('jquery_demo') + '''
						
						<p>
						''' + listDemo ('jquery_demo/jquery_demo.html', self.app) + '''
						
						<p>
						''' + listDemo ('jquery_demo/jquery_demo.py',self.app) + '''
						
						<p>
						<a href="#index">Back to index</a>
					</div>
					
					<!--div class="section lane" style="background-color:''' + stripe () + '''">
						<div id="terminal" class="target"></div>					
						<h3>Terminal</h3>
						
						<p>
						For someone learning the language, the event driven browser environment can be intimidating in itself. Transcrypt has simple facilities for blocking IO resembling a terminal or command line environment.
						
						<p>
						''' + runDemo ('terminal_demo') + '''
						
						<p>
						''' + listDemo ('terminal_demo/terminal_demo.html', self.app) + '''
						
						<p>
						''' + listDemo ('terminal_demo/terminal_demo.py', self.app) + '''

						<p>
						<a href="#index">,<- index</a>
					</div-->
					
					<div class="section lane" style="background-color:''' + stripe () + '''">
						<div id="react_demo" class="target"></div>
						<h3>React</h3>
						
						<p>
						The React library makes it possible to create fast reacting interactive GUI's, by modifying a virtual DOM first and then adapting the real DOM in a minimal way. This example shows how it can be used in combination with Transcrypt.
						
						<p>
						''' + runDemo ('react_demo') + '''
						
						<p>
						''' + listDemo ('react_demo/react_demo.html', self.app) + '''
						
						<p>
						''' + listDemo ('react_demo/react_demo.py', self.app) + '''

						<p>
						<a href="#index">Back to index</a>
					</div>
					
					<div class="section lane" style="background-color:''' + stripe () + '''">
						<div id="pong_demo" class="target"></div>
						<h3>Pong: Multiple classes and encapsulating Fabric.js</h3>
						
						<p>
						This example illustrates the clean application structure that can achieved by using class based object orientation in combination with encapsulating a JavaScript library as a Python module. Encapsulating JavaScript libraries is never necessary and in many cases it's overkill, all libraries can be used as-is. Moreover in this example the use of the voluminous Fabric.js library, encapsulated or not, is in itself overkill as well. The same functionality could have been achieved easily directly on top of the HTML5 canvas. But it serves to illustrate the principle.
						
						<p>
						A case where such encapsulation on the contrary is very useful, is the implementation of the Fast Fourier Transform in Numscrypt. The API is modeled after Numpy, utilizing an <i>ndarray</i> of type <i>complex</i>. Under the hood an efficient JavaScript open source library is used. By marrying the two, this functionality smoothly fits into Numscrypt, complete with operator overloading and slicing. This case was less suitable as an example here, since it requires mathematical knowledge.
						
						<p>
						''' + runDemo ('pong') + '''
						
						<p>
						''' + listDemo ('pong/pong.html', self.app) + '''
						
						<p>
						''' + listDemo ('pong/pong.py', self.app) + '''

						<p>
						<a href="#index">Back to index</a>
					</div>
					
					<div class="section lane" style="background-color:''' + stripe () + '''">
						<div id="d3js_demo" class="target"></div>
						<h3>D3.js</h3>
						
						<p>
						D3.js is a graphics library that offers data driven animation of the DOM. Using Python's 'classical' object orientation, D3.js programs are easy to comprehend and maintain.
						
						<p>
						''' + runDemo ('d3js_demo') + '''
						
						<p>
						''' + listDemo ('d3js_demo/d3js_demo.html', self.app) + '''
						
						<p>
						''' + listDemo ('d3js_demo/d3js_demo.py', self.app) + '''

						<p>
						<a href="#index">Back to index</a>
					</div>
					
					<div class="section lane" style="background-color:''' + stripe () + '''">
						<div id="ios_app" class="target"></div>
						<h3>'Dice' iOS Web App</h3>
						
						<p>
						Web Apps for iOS are full screen iOS browser applications that have a hidden address bar, while zooming and scrolling are blocked. By including a so called "cache manifest", they are cached on your iOS device, they don't need an internet connection to function. Also they can access the user's location. Starting them up happens by clicking a customized icon on your home screen. In other words: They behave like an app, but without the hassle. Rather than requiring admission to the app store, they can be downloaded from any site. With Transcrypt you just program them in Python. As an extra, they also feel at home in any browser, not just running under iOS.
						
						<p>
							<div class="images">
								<img class="ios_portrait" src="illustrations/ios_app.png">
								<img class="ios_portrait" src="illustrations/ios_app_icon.png">
							</div>
							<div class="clear"></div>
						<p>
						''' + runDemo ('ios_app') + '''
						
						<p>
						''' + listDemo ('ios_app/ios_app.html', self.app) + '''
						
						<p>
						''' + listDemo ('ios_app/ios_app.py', self.app) + '''
						
						<p>
						''' + listDemo ('ios_app/cache.manifest', self.app) + '''

						<p>
						<a href="#index">Back to index</a>
					</div>
					
					<div class="section lane" style="background-color:''' + stripe () + '''">
						<div id="riot_demo" class="target"></div>
						<h3>Riot</h3>
						
						<p>
						The Riot library also uses a virtual DOM, just like React. It works with custom tags that define structure, style and behaviour of reusable components.
						
						<p>
						''' + runDemo ('riot_demo') + '''
						
						<p>
						''' + listDemo ('riot_demo/riot_demo.html', self.app) + '''
						
						<p>
						''' + listDemo ('riot_demo/color.py', self.app) + '''
						
						<p>
						''' + listDemo ('riot_demo/riot_tag.py', self.app) + '''
						
						<p>
						''' + listDemo ('riot_demo/riot_demo.py', self.app) + '''

						<p>
						<a href="#index">Back to index</a>
					</div>
					
					<div class="section lane" style="background-color:''' + stripe () + '''">
						<div id="plotly_demo" class="target"></div>
						<h3>Plotly: live scientific plotting in the browser</h3>
						
						<p>
						The free version of the plotly.js library offers a rich set of scientific plots. As with any JavaScript library, Transcrypt is able to use plotly.js directly in the browser. There's no need to go through a special Python interface layer as would be the case when running plotly from a desktop Python installation. This means that the full native functionality of plotly.js is at your disposal, using plain Python syntax. For convenience, <i>__pragma__ ('jskeys')</i> can be used to void the need for quotes in dictionary keys.
						
						<p>
						It should be stressed that your complete computational application runs in the browser. While this restricts the scale of computations to what a browser running JavaScript can handle, it offers the possibility to change computation parameters live and see the result immediately. Rather than putting the <i>outcomes</i> of your computations on the internet, you can make available the live computations themselves.
						
						<p>
						To achieve presentation quality results, plotly.js uses WebGL for its 3D graphs, something not all browsers currently support. The compiled Transcrypt code to use plotly.js is tiny and fast, but the plotly.js library itself has a large download and performs a lot of time consuming arithmetic. <b>So loading the example page below may take quite some time.</b>
						
						<p>
						''' + runDemo ('plotly_demo') + '''
						
						<p>
						''' + listDemo ('plotly_demo/plotly_demo.html', self.app) + '''
						
						<p>
						''' + listDemo ('plotly_demo/plotly_demo.py', self.app) + '''

						<p>
						<a href="#index">Back to index</a>
					</div>	
				</div>
				
				<div>
					''' + base_pyhtml.getFooter () + '''
				</div>
			</div> <!-- moving -->
		</body>
	'''
	